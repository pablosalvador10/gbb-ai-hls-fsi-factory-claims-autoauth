{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "18207231089319522761"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment that can be used as part of naming resource convention"
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "canadaeast",
        "eastus",
        "eastus2",
        "francecentral",
        "japaneast",
        "norwayeast",
        "polandcentral",
        "southindia",
        "swedencentral",
        "switzerlandnorth",
        "uksouth",
        "westus3"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources. Not all regions are supported due to OpenAI limitations"
      }
    },
    "frontendExists": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Flag to indicate if Frontend app image exists. This is managed by AZD"
      }
    },
    "backendExists": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Flag to indicate if Backend app image exists. This is managed by AZD"
      }
    },
    "priorAuthName": {
      "type": "string",
      "defaultValue": "priorAuth",
      "minLength": 2,
      "maxLength": 12,
      "metadata": {
        "description": "Name for the PriorAuth resource and used to derive the name of dependent resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "environment": "[parameters('environmentName')]",
        "location": "[parameters('location')]"
      },
      "metadata": {
        "description": "Tags to be applied to all resources"
      }
    },
    "openAiApiVersion": {
      "type": "string",
      "defaultValue": "2024-08-01-preview",
      "metadata": {
        "description": "API Version of the OpenAI API"
      }
    },
    "chatCompletionModels": {
      "type": "array",
      "defaultValue": [
        {
          "name": "o1",
          "version": "2024-12-17",
          "skuName": "Standard",
          "capacity": 100
        }
      ],
      "metadata": {
        "description": "List of completion models to be deployed to the OpenAI account."
      }
    },
    "embeddingModel": {
      "type": "object",
      "defaultValue": {
        "name": "text-embedding-3-large",
        "version": "1",
        "skuName": "Standard",
        "capacity": 50
      },
      "metadata": {
        "description": "List of embedding models to be deployed to the OpenAI account."
      }
    },
    "embeddingModelDimension": {
      "type": "string",
      "defaultValue": "3072",
      "metadata": {
        "description": "Embedding model size for the OpenAI Embedding deployment"
      }
    },
    "storageBlobContainerName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Storage Blob Container name to land the files for Prior Auth"
      }
    }
  },
  "variables": {
    "azd_tags": "[union(parameters('tags'), createObject('hidden-title', format('Prior Auth {0}', parameters('environmentName')), 'azd-env-name', parameters('environmentName')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('azd_tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "resources",
      "resourceGroup": "[format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "priorAuthName": {
            "value": "[parameters('priorAuthName')]"
          },
          "openAiApiVersion": {
            "value": "[parameters('openAiApiVersion')]"
          },
          "chatCompletionModels": {
            "value": "[parameters('chatCompletionModels')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingModelDimension": {
            "value": "[parameters('embeddingModelDimension')]"
          },
          "storageBlobContainerName": {
            "value": "[parameters('storageBlobContainerName')]"
          },
          "tags": {
            "value": "[variables('azd_tags')]"
          },
          "frontendExists": {
            "value": "[parameters('frontendExists')]"
          },
          "backendExists": {
            "value": "[parameters('backendExists')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "8500776381135512047"
            }
          },
          "parameters": {
            "frontendExists": {
              "type": "bool",
              "defaultValue": false
            },
            "backendExists": {
              "type": "bool",
              "defaultValue": false
            },
            "priorAuthName": {
              "type": "string",
              "defaultValue": "priorAuth",
              "minLength": 2,
              "maxLength": 12,
              "metadata": {
                "description": "Name for the PriorAuth resource and used to derive the name of dependent resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Set of tags to apply to all resources."
              }
            },
            "cosmosDbCollectionName": {
              "type": "string",
              "defaultValue": "temp"
            },
            "cosmosDbDatabaseName": {
              "type": "string",
              "defaultValue": "priorauthsessions"
            },
            "openAiApiVersion": {
              "type": "string",
              "defaultValue": "2024-08-01-preview",
              "metadata": {
                "description": "API Version of the OpenAI API"
              }
            },
            "chatCompletionModels": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "gpt-4o",
                  "version": "2024-08-06",
                  "skuName": "GlobalStandard",
                  "capacity": 25
                }
              ],
              "metadata": {
                "description": "List of completion models to be deployed to the OpenAI account."
              }
            },
            "embeddingModel": {
              "type": "object",
              "defaultValue": {
                "name": "text-embedding-ada-002",
                "version": "2",
                "skuName": "Standard",
                "capacity": 16
              },
              "metadata": {
                "description": "List of embedding models to be deployed to the OpenAI account."
              }
            },
            "embeddingModelDimension": {
              "type": "string",
              "defaultValue": "1536",
              "metadata": {
                "description": "Embedding model size for the OpenAI Embedding deployment"
              }
            },
            "storageBlobContainerName": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Storage Blob Container name to land the files for Prior Auth"
              }
            }
          },
          "variables": {
            "name": "[toLower(format('{0}', parameters('priorAuthName')))]",
            "uniqueSuffix": "[substring(uniqueString(resourceGroup().id), 0, 7)]",
            "storageServiceName": "[toLower(replace(format('storage-{0}-{1}', variables('name'), variables('uniqueSuffix')), '-', ''))]",
            "location": "[resourceGroup().location]",
            "frontendContainerName": "[toLower(format('pe-fe-{0}-{1}', variables('name'), variables('uniqueSuffix')))]",
            "backendContainerName": "[toLower(format('pe-be-{0}-{1}', variables('name'), variables('uniqueSuffix')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), 'Storage Blob Data Reader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceIdentityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), 'Storage Blob Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), 'Storage Blob Data Reader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('doc-intelligence-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "S0"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "4461883980771064824"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the AI service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "S0"
                      ],
                      "metadata": {
                        "description": "AI service SKU"
                      }
                    }
                  },
                  "variables": {
                    "aiServiceNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('aiServiceNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "AIServices",
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "disableLocalAuth": false,
                        "apiProperties": {
                          "statisticsEnabled": false
                        },
                        "customSubDomainName": "[variables('aiServiceNameCleaned')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "aiServicesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').endpoint]"
                    },
                    "aiServiceDocIntelligenceEndpoint": {
                      "type": "string",
                      "value": "[format('https://{0}.cognitiveservices.azure.com/', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesName": {
                      "type": "string",
                      "value": "[variables('aiServiceNameCleaned')]"
                    },
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01', 'full').identity.principalId]"
                    },
                    "aiServicesKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('multiservice-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "S0"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "14264198139338104743"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the AI service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "S0"
                      ],
                      "metadata": {
                        "description": "AI service SKU"
                      }
                    }
                  },
                  "variables": {
                    "aiServiceNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('aiServiceNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "CognitiveServices",
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "disableLocalAuth": false,
                        "apiProperties": {
                          "statisticsEnabled": false
                        },
                        "customSubDomainName": "[variables('aiServiceNameCleaned')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "aiServicesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').endpoint]"
                    },
                    "aiServicesName": {
                      "type": "string",
                      "value": "[variables('aiServiceNameCleaned')]"
                    },
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01', 'full').identity.principalId]"
                    },
                    "aiServicesPrimaryKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('openai-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "S0"
                  },
                  "embeddingModel": {
                    "value": "[parameters('embeddingModel')]"
                  },
                  "chatCompletionModels": {
                    "value": "[parameters('chatCompletionModels')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "5226470766090485548"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the AI service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "S0"
                      ],
                      "metadata": {
                        "description": "AI service SKU"
                      }
                    },
                    "chatCompletionModels": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "name": "gpt-4o",
                          "version": "2024-08-06",
                          "skuName": "GlobalStandard",
                          "capacity": 25
                        }
                      ],
                      "metadata": {
                        "description": "List of chat completion models to be deployed to the OpenAI account."
                      }
                    },
                    "embeddingModel": {
                      "type": "object",
                      "defaultValue": {
                        "name": "text-embedding-ada-002",
                        "version": "2",
                        "skuName": "Standard",
                        "capacity": 250
                      },
                      "metadata": {
                        "description": "List of embedding models to be deployed to the OpenAI account."
                      }
                    }
                  },
                  "variables": {
                    "combinedModels": "[concat(parameters('chatCompletionModels'), createArray(parameters('embeddingModel')))]",
                    "aiServiceNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('aiServiceNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "OpenAI",
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "disableLocalAuth": false,
                        "apiProperties": {
                          "statisticsEnabled": false
                        },
                        "customSubDomainName": "[variables('aiServiceNameCleaned')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "modelDeployments",
                        "count": "[length(variables('combinedModels'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', variables('aiServiceNameCleaned'), format('{0}', variables('combinedModels')[copyIndex()].name))]",
                      "sku": {
                        "name": "[variables('combinedModels')[copyIndex()].skuName]",
                        "capacity": "[variables('combinedModels')[copyIndex()].capacity]"
                      },
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[variables('combinedModels')[copyIndex()].name]",
                          "version": "[variables('combinedModels')[copyIndex()].version]"
                        },
                        "currentCapacity": "[variables('combinedModels')[copyIndex()].capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "aiServicesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').endpoint]"
                    },
                    "aiServicesName": {
                      "type": "string",
                      "value": "[variables('aiServiceNameCleaned')]"
                    },
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01', 'full').identity.principalId]"
                    },
                    "aiServicesKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('search-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "basic"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "9778162961165438260"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Search service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "basic",
                      "allowedValues": [
                        "basic"
                      ],
                      "metadata": {
                        "description": "Search service SKU"
                      }
                    }
                  },
                  "variables": {
                    "searchNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Search/searchServices",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[variables('searchNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "hostingMode": "default"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "searchServiceIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Search/searchServices', variables('searchNameCleaned')), '2024-06-01-preview', 'full').identity.principalId]"
                    },
                    "searchServiceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Search/searchServices', variables('searchNameCleaned'))]"
                    },
                    "searchServiceName": {
                      "type": "string",
                      "value": "[variables('searchNameCleaned')]"
                    },
                    "searchServicePrimaryKey": {
                      "type": "string",
                      "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('searchNameCleaned')), '2024-06-01-preview').primaryKey]"
                    },
                    "searchServiceEndpoint": {
                      "type": "string",
                      "value": "[format('https://{0}.search.windows.net', variables('searchNameCleaned'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[variables('storageServiceName')]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "Standard_LRS"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "8681779852569619356"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Storage account"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS"
                      ],
                      "metadata": {
                        "description": "Storage SKU"
                      }
                    }
                  },
                  "variables": {
                    "storageNameCleaned": "[toLower(replace(parameters('aiServiceName'), '-', ''))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-05-01",
                      "name": "[take(variables('storageNameCleaned'), 24)]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "minimumTlsVersion": "TLS1_2",
                        "publicNetworkAccess": "Enabled",
                        "supportsHttpsTrafficOnly": true,
                        "defaultToOAuthAuthentication": true
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', take(variables('storageNameCleaned'), 24), 'default')]",
                      "properties": {
                        "deleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}/{2}', take(variables('storageNameCleaned'), 24), 'default', 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', take(variables('storageNameCleaned'), 24), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}/{2}', take(variables('storageNameCleaned'), 24), 'default', 'pre-auth-policies')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', take(variables('storageNameCleaned'), 24), 'default')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageAccountId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24))]"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "value": "[take(variables('storageNameCleaned'), 24)]"
                    },
                    "storageAccountPrimaryKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24)), '2023-05-01').keys[0].value]"
                    },
                    "storageAccountPrimaryConnectionString": {
                      "type": "string",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', take(variables('storageNameCleaned'), 24), listKeys(resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24)), '2023-05-01').keys[0].value)]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('cosmosdb-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "2865037101428017356"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Mongo cluster"
                      }
                    }
                  },
                  "variables": {
                    "mongoNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[variables('mongoNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "MongoDB",
                      "properties": {
                        "databaseAccountOfferType": "Standard",
                        "locations": [
                          {
                            "locationName": "[parameters('location')]",
                            "failoverPriority": 0
                          }
                        ],
                        "apiProperties": {
                          "serverVersion": "7.0"
                        },
                        "capabilities": [
                          {
                            "name": "EnableMongo"
                          }
                        ],
                        "consistencyPolicy": {
                          "defaultConsistencyLevel": "Session"
                        },
                        "publicNetworkAccess": "Enabled"
                      }
                    }
                  ],
                  "outputs": {
                    "mongoClusterId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('mongoNameCleaned'))]"
                    },
                    "mongoClusterName": {
                      "type": "string",
                      "value": "[variables('mongoNameCleaned')]"
                    },
                    "mongoConnectionString": {
                      "type": "string",
                      "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('mongoNameCleaned')), '2024-11-15').connectionStrings[0].connectionString]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsName": {
                    "value": "[format('loganalytics-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "applicationInsightsName": {
                    "value": "[format('appinsights-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "applicationInsightsDashboardName": {
                    "value": "[format('aiDashboard-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "10958835295881470966"
                    },
                    "name": "Azd Azure Monitoring",
                    "description": "Creates an Application Insights instance and a Log Analytics workspace.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource operational insights workspaces name."
                      }
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource insights components name."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "applicationInsightsDashboardName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource portal dashboards name."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.azd-monitoring.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalytics": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "loganalytics",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('logAnalyticsName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "dataRetention": {
                            "value": 30
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "11627784326487264389"
                            },
                            "name": "Log Analytics Workspaces",
                            "description": "This module deploys a Log Analytics Workspace.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "useThisWorkspace": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "PerGB2018",
                              "allowedValues": [
                                "CapacityReservation",
                                "Free",
                                "LACluster",
                                "PerGB2018",
                                "PerNode",
                                "Premium",
                                "Standalone",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. The name of the SKU."
                              }
                            },
                            "skuCapacityReservationLevel": {
                              "type": "int",
                              "defaultValue": 100,
                              "minValue": 100,
                              "maxValue": 5000,
                              "metadata": {
                                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
                              }
                            },
                            "storageInsightsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of storage accounts to be read by the workspace."
                              }
                            },
                            "linkedServices": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of services to be linked."
                              }
                            },
                            "linkedStorageAccounts": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                              }
                            },
                            "savedSearches": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Kusto Query Language searches to save."
                              }
                            },
                            "dataExports": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. LAW data export instances to be deployed."
                              }
                            },
                            "dataSources": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. LAW data sources to configure."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. LAW custom tables to be deployed."
                              }
                            },
                            "gallerySolutions": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                              }
                            },
                            "dataRetention": {
                              "type": "int",
                              "defaultValue": 365,
                              "minValue": 0,
                              "maxValue": 730,
                              "metadata": {
                                "description": "Optional. Number of days data will be retained for."
                              }
                            },
                            "dailyQuotaGb": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "metadata": {
                                "description": "Optional. The workspace daily quota for ingestion."
                              }
                            },
                            "publicNetworkAccessForIngestion": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics ingestion."
                              }
                            },
                            "publicNetworkAccessForQuery": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics query."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
                              }
                            },
                            "useResourcePermissions": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "forceCmkForQuery": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "logAnalyticsWorkspace": {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "features": {
                                  "searchVersion": 1,
                                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                                },
                                "sku": {
                                  "name": "[parameters('skuName')]",
                                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                                },
                                "retentionInDays": "[parameters('dataRetention')]",
                                "workspaceCapping": {
                                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                                },
                                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                              },
                              "identity": "[variables('identity')]"
                            },
                            "logAnalyticsWorkspace_diagnosticSettings": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_roleAssignments": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_storageInsightConfigs": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                                "count": "[length(parameters('storageInsightsConfigs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "containers": {
                                    "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'containers')]"
                                  },
                                  "tables": {
                                    "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'tables')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountResourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1745671120474305926"
                                    },
                                    "name": "Log Analytics Workspace Storage Insight Configs",
                                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the storage insights config."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                                      }
                                    },
                                    "containers": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The names of the blob containers that the workspace should read."
                                      }
                                    },
                                    "tables": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The names of the Azure tables that the workspace should read."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2022-09-01",
                                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                                    },
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "storageinsightconfig": {
                                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "containers": "[parameters('containers')]",
                                        "tables": "[parameters('tables')]",
                                        "storageAccount": {
                                          "id": "[parameters('storageAccountResourceId')]",
                                          "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').keys[0].value]"
                                        }
                                      },
                                      "dependsOn": [
                                        "storageAccount",
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed storage insights configuration."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the storage insight configuration is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the storage insights configuration."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedServices": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedServices",
                                "count": "[length(parameters('linkedServices'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('linkedServices')[copyIndex()].name]"
                                  },
                                  "resourceId": {
                                    "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'resourceId')]"
                                  },
                                  "writeAccessResourceId": {
                                    "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "12032441371027552374"
                                    },
                                    "name": "Log Analytics Workspace Linked Services",
                                    "description": "This module deploys a Log Analytics Workspace Linked Service.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                      }
                                    },
                                    "writeAccessResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "linkedService": {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resourceId": "[parameters('resourceId')]",
                                        "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked service."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked service is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedStorageAccounts": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                                "count": "[length(parameters('linkedStorageAccounts'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                                  },
                                  "resourceId": {
                                    "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "12623216644328477682"
                                    },
                                    "name": "Log Analytics Workspace Linked Storage Accounts",
                                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Query",
                                        "Alerts",
                                        "CustomLogs",
                                        "AzureWatson"
                                      ],
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "storageAccountIds": [
                                          "[parameters('resourceId')]"
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked storage account."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked storage account."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked storage account is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_savedSearches": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_savedSearches",
                                "count": "[length(parameters('savedSearches'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                                  },
                                  "etag": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'etag')]"
                                  },
                                  "displayName": {
                                    "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                                  },
                                  "category": {
                                    "value": "[parameters('savedSearches')[copyIndex()].category]"
                                  },
                                  "query": {
                                    "value": "[parameters('savedSearches')[copyIndex()].query]"
                                  },
                                  "functionAlias": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionAlias')]"
                                  },
                                  "functionParameters": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionParameters')]"
                                  },
                                  "version": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'version')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "7683333179440464721"
                                    },
                                    "name": "Log Analytics Workspace Saved Searches",
                                    "description": "This module deploys a Log Analytics Workspace Saved Search.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the saved search."
                                      }
                                    },
                                    "displayName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Display name for the search."
                                      }
                                    },
                                    "category": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Query category."
                                      }
                                    },
                                    "query": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Kusto Query to be stored."
                                      }
                                    },
                                    "tags": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    },
                                    "functionAlias": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The function alias if query serves as a function."
                                      }
                                    },
                                    "functionParameters": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                                      }
                                    },
                                    "version": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The version number of the query language."
                                      }
                                    },
                                    "etag": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "savedSearch": {
                                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "etag": "[parameters('etag')]",
                                        "tags": "[coalesce(parameters('tags'), createArray())]",
                                        "displayName": "[parameters('displayName')]",
                                        "category": "[parameters('category')]",
                                        "query": "[parameters('query')]",
                                        "functionAlias": "[parameters('functionAlias')]",
                                        "functionParameters": "[parameters('functionParameters')]",
                                        "version": "[parameters('version')]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed saved search."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the saved search is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed saved search."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace",
                                "logAnalyticsWorkspace_linkedStorageAccounts"
                              ]
                            },
                            "logAnalyticsWorkspace_dataExports": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataExports",
                                "count": "[length(parameters('dataExports'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('dataExports')[copyIndex()].name]"
                                  },
                                  "destination": {
                                    "value": "[tryGet(parameters('dataExports')[copyIndex()], 'destination')]"
                                  },
                                  "enable": {
                                    "value": "[tryGet(parameters('dataExports')[copyIndex()], 'enable')]"
                                  },
                                  "tableNames": {
                                    "value": "[tryGet(parameters('dataExports')[copyIndex()], 'tableNames')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "5765609820817623497"
                                    },
                                    "name": "Log Analytics Workspace Data Exports",
                                    "description": "This module deploys a Log Analytics Workspace Data Export.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 4,
                                      "maxLength": 63,
                                      "metadata": {
                                        "description": "Required. The data export rule name."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "destination": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Destination properties."
                                      }
                                    },
                                    "enable": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Active when enabled."
                                      }
                                    },
                                    "tableNames": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "destination": "[parameters('destination')]",
                                        "enable": "[parameters('enable')]",
                                        "tableNames": "[parameters('tableNames')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the data export."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the data export."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the data export was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_dataSources": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataSources",
                                "count": "[length(parameters('dataSources'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('dataSources')[copyIndex()].name]"
                                  },
                                  "kind": {
                                    "value": "[parameters('dataSources')[copyIndex()].kind]"
                                  },
                                  "linkedResourceId": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'linkedResourceId')]"
                                  },
                                  "eventLogName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventLogName')]"
                                  },
                                  "eventTypes": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventTypes')]"
                                  },
                                  "objectName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'objectName')]"
                                  },
                                  "instanceName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'instanceName')]"
                                  },
                                  "intervalSeconds": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'intervalSeconds')]"
                                  },
                                  "counterName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'counterName')]"
                                  },
                                  "state": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'state')]"
                                  },
                                  "syslogName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogName')]"
                                  },
                                  "syslogSeverities": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogSeverities')]"
                                  },
                                  "performanceCounters": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'performanceCounters')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "13460038983765020046"
                                    },
                                    "name": "Log Analytics Workspace Datasources",
                                    "description": "This module deploys a Log Analytics Workspace Data Source.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the solution."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "AzureActivityLog",
                                      "allowedValues": [
                                        "AzureActivityLog",
                                        "WindowsEvent",
                                        "WindowsPerformanceCounter",
                                        "IISLogs",
                                        "LinuxSyslog",
                                        "LinuxSyslogCollection",
                                        "LinuxPerformanceObject",
                                        "LinuxPerformanceCollection"
                                      ],
                                      "metadata": {
                                        "description": "Required. The kind of the DataSource."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    },
                                    "linkedResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the resource to be linked."
                                      }
                                    },
                                    "eventLogName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "eventTypes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "objectName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "instanceName": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "intervalSeconds": {
                                      "type": "int",
                                      "defaultValue": 60,
                                      "metadata": {
                                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "performanceCounters": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                                      }
                                    },
                                    "counterName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                                      }
                                    },
                                    "state": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                                      }
                                    },
                                    "syslogName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                                      }
                                    },
                                    "syslogSeverities": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "dataSource": {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "kind": "[parameters('kind')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed data source."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the data source is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed data source."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_tables": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()].name]"
                                  },
                                  "plan": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'plan')]"
                                  },
                                  "schema": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'schema')]"
                                  },
                                  "retentionInDays": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'retentionInDays')]"
                                  },
                                  "totalRetentionInDays": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'totalRetentionInDays')]"
                                  },
                                  "restoredLogs": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'restoredLogs')]"
                                  },
                                  "searchResults": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'searchResults')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "10380077652898392916"
                                    },
                                    "name": "Log Analytics Workspace Tables",
                                    "description": "This module deploys a Log Analytics Workspace Table.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the table."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "plan": {
                                      "type": "string",
                                      "defaultValue": "Analytics",
                                      "allowedValues": [
                                        "Basic",
                                        "Analytics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                                      }
                                    },
                                    "restoredLogs": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Restore parameters."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 730,
                                      "metadata": {
                                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                                      }
                                    },
                                    "schema": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Table's schema."
                                      }
                                    },
                                    "searchResults": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Parameters of the search job that initiated this table."
                                      }
                                    },
                                    "totalRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 2555,
                                      "metadata": {
                                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('workspaceName')]"
                                    },
                                    "table": {
                                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                                      "apiVersion": "2022-10-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "plan": "[parameters('plan')]",
                                        "restoredLogs": "[parameters('restoredLogs')]",
                                        "retentionInDays": "[parameters('retentionInDays')]",
                                        "schema": "[parameters('schema')]",
                                        "searchResults": "[parameters('searchResults')]",
                                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    },
                                    "table_roleAssignments": {
                                      "copy": {
                                        "name": "table_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "table"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the table."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the table."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the table was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_solutions": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_solutions",
                                "count": "[length(parameters('gallerySolutions'))]"
                              },
                              "condition": "[not(empty(parameters('gallerySolutions')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "product": {
                                    "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'product')]"
                                  },
                                  "publisher": {
                                    "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'publisher')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(parameters('gallerySolutions')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.23.1.45101",
                                      "templateHash": "18444780972506374592"
                                    },
                                    "name": "Operations Management Solutions",
                                    "description": "This module deploys an Operations Management Solution.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                                      }
                                    },
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "product": {
                                      "type": "string",
                                      "defaultValue": "OMSGallery",
                                      "metadata": {
                                        "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "defaultValue": "Microsoft",
                                      "metadata": {
                                        "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                                    "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.OperationsManagement/solutions",
                                      "apiVersion": "2015-11-01-preview",
                                      "name": "[variables('solutionName')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                                      },
                                      "plan": {
                                        "name": "[variables('solutionName')]",
                                        "promotionCode": "",
                                        "product": "[variables('solutionProduct')]",
                                        "publisher": "[parameters('publisher')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed solution."
                                      },
                                      "value": "[variables('solutionName')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed solution."
                                      },
                                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the solution is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed log analytics workspace."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed log analytics workspace."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed log analytics workspace."
                              },
                              "value": "[parameters('name')]"
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The ID associated with the workspace."
                              },
                              "value": "[reference('logAnalyticsWorkspace').customerId]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('logAnalyticsWorkspace', '2022-10-01', 'full').location]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('logAnalyticsWorkspace', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
                            }
                          }
                        }
                      }
                    },
                    "applicationInsights": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "applicationinsights",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[reference('logAnalytics').outputs.resourceId.value]"
                          },
                          "name": {
                            "value": "[parameters('applicationInsightsName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "dashboardName": {
                            "value": "[parameters('applicationInsightsDashboardName')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "17156187352453961206"
                            },
                            "name": "Application Insights Components",
                            "description": "Creates an Application Insights instance based on an existing Log Analytics workspace.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource insights components name."
                              }
                            },
                            "dashboardName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource portal dashboards name."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the loganalytics workspace."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "web",
                              "metadata": {
                                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                              }
                            },
                            "applicationType": {
                              "type": "string",
                              "defaultValue": "web",
                              "allowedValues": [
                                "web",
                                "other"
                              ],
                              "metadata": {
                                "description": "Optional. Application type."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.ptn.azd-insightsdashboard.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "applicationInsights": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-appinsights', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "applicationType": {
                                    "value": "[parameters('applicationType')]"
                                  },
                                  "workspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "10653241142071426932"
                                    },
                                    "name": "Application Insights",
                                    "description": "This component deploys an Application Insights instance.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Application Insights."
                                      }
                                    },
                                    "applicationType": {
                                      "type": "string",
                                      "defaultValue": "web",
                                      "allowedValues": [
                                        "web",
                                        "other"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Application type."
                                      }
                                    },
                                    "workspaceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
                                      }
                                    },
                                    "disableIpMasking": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Disable IP masking. Default value is set to true."
                                      }
                                    },
                                    "disableLocalAuth": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Disable Non-AAD based Auth. Default value is set to false."
                                      }
                                    },
                                    "forceCustomerStorageForProfiler": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Force users to create their own storage account for profiler and debugger."
                                      }
                                    },
                                    "linkedStorageAccountResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Linked storage account resource ID."
                                      }
                                    },
                                    "publicNetworkAccessForIngestion": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                                      }
                                    },
                                    "publicNetworkAccessForQuery": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "allowedValues": [
                                        30,
                                        60,
                                        90,
                                        120,
                                        180,
                                        270,
                                        365,
                                        550,
                                        730
                                      ],
                                      "metadata": {
                                        "description": "Optional. Retention period in days."
                                      }
                                    },
                                    "samplingPercentage": {
                                      "type": "int",
                                      "defaultValue": 100,
                                      "minValue": 0,
                                      "maxValue": 100,
                                      "metadata": {
                                        "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                                      "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.insights-component.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "appInsights": {
                                      "type": "Microsoft.Insights/components",
                                      "apiVersion": "2020-02-02",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": {
                                        "Application_Type": "[parameters('applicationType')]",
                                        "DisableIpMasking": "[parameters('disableIpMasking')]",
                                        "DisableLocalAuth": "[parameters('disableLocalAuth')]",
                                        "ForceCustomerStorageForProfiler": "[parameters('forceCustomerStorageForProfiler')]",
                                        "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                        "RetentionInDays": "[parameters('retentionInDays')]",
                                        "SamplingPercentage": "[parameters('samplingPercentage')]"
                                      }
                                    },
                                    "appInsights_roleAssignments": {
                                      "copy": {
                                        "name": "appInsights_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Insights/components', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "appInsights"
                                      ]
                                    },
                                    "appInsights_diagnosticSettings": {
                                      "copy": {
                                        "name": "appInsights_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "appInsights"
                                      ]
                                    },
                                    "linkedStorageAccount": {
                                      "condition": "[not(empty(parameters('linkedStorageAccountResourceId')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-appInsights-linkedStorageAccount', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "appInsightsName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "storageAccountResourceId": {
                                            "value": "[parameters('linkedStorageAccountResourceId')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "216781367921725873"
                                            },
                                            "name": "Application Insights Linked Storage Account",
                                            "description": "This component deploys an Application Insights Linked Storage Account.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "appInsightsName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Application Insights instance. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "storageAccountResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Linked storage account resource ID."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "microsoft.insights/components/linkedStorageAccounts",
                                              "apiVersion": "2020-03-01-preview",
                                              "name": "[format('{0}/{1}', parameters('appInsightsName'), 'ServiceProfiler')]",
                                              "properties": {
                                                "linkedStorageAccount": "[parameters('storageAccountResourceId')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Linked Storage Account."
                                              },
                                              "value": "ServiceProfiler"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the Linked Storage Account."
                                              },
                                              "value": "[resourceId('microsoft.insights/components/linkedStorageAccounts', parameters('appInsightsName'), 'ServiceProfiler')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the agent pool was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "appInsights"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the application insights component."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the application insights component."
                                      },
                                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the application insights component was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "applicationId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The application ID of the application insights component."
                                      },
                                      "value": "[reference('appInsights').AppId]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('appInsights', '2020-02-02', 'full').location]"
                                    },
                                    "instrumentationKey": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component."
                                      },
                                      "value": "[reference('appInsights').InstrumentationKey]"
                                    },
                                    "connectionString": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Application Insights Connection String."
                                      },
                                      "value": "[reference('appInsights').ConnectionString]"
                                    }
                                  }
                                }
                              }
                            },
                            "applicationInsightsDashboard": {
                              "condition": "[not(empty(parameters('dashboardName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "application-insights-dashboard",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('dashboardName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "applicationInsightsName": {
                                    "value": "[reference('applicationInsights').outputs.name.value]"
                                  },
                                  "applicationInsightsResourceId": {
                                    "value": "[reference('applicationInsights').outputs.resourceId.value]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "9856731218551847403"
                                    },
                                    "name": "Azure Portal Dashboard",
                                    "description": "Creates a dashboard for an Application Insights instance.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The portal dashboard name."
                                      }
                                    },
                                    "applicationInsightsName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource insights components name."
                                      }
                                    },
                                    "applicationInsightsResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource insights components ID."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "dashboard": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "dashboard-deployment",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('name')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "lenses": {
                                            "value": [
                                              {
                                                "order": 0,
                                                "parts": [
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 0,
                                                      "colSpan": 2,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "id",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/AspNetOverviewPinnedPart",
                                                      "asset": {
                                                        "idInputName": "id",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "overview"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 2,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/ProactiveDetectionAsyncPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "ProactiveDetection"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 3,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "ResourceId",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/QuickPulseButtonSmallPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "endTime": null,
                                                            "createdTime": "2018-05-04T01:20:33.345Z",
                                                            "isInitialTime": true,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/AvailabilityNavButtonPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 5,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "endTime": null,
                                                            "createdTime": "2018-05-08T18:47:35.237Z",
                                                            "isInitialTime": true,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        },
                                                        {
                                                          "name": "ConfigurationId",
                                                          "value": "78ce933e-e864-4b05-a27b-71fd55a6afad"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/AppMapButtonPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Usage",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 3,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "endTime": null,
                                                            "createdTime": "2018-05-04T01:22:35.782Z",
                                                            "isInitialTime": true,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/UsageUsersOverviewPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Reliability",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 7,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ResourceId",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        },
                                                        {
                                                          "name": "DataModel",
                                                          "value": {
                                                            "version": "1.0.0",
                                                            "timeContext": {
                                                              "durationMs": 86400000,
                                                              "createdTime": "2018-05-04T23:42:40.072Z",
                                                              "isInitialTime": false,
                                                              "grain": 1,
                                                              "useDashboardTimeRange": false
                                                            }
                                                          },
                                                          "isOptional": true
                                                        },
                                                        {
                                                          "name": "ConfigurationId",
                                                          "value": "8a02f7bf-ac0f-40e1-afe9-f0e72cfee77f",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/CuratedBladeFailuresPinnedPart",
                                                      "isAdapter": true,
                                                      "asset": {
                                                        "idInputName": "ResourceId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "failures"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Responsiveness\r\n",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 11,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ResourceId",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        },
                                                        {
                                                          "name": "DataModel",
                                                          "value": {
                                                            "version": "1.0.0",
                                                            "timeContext": {
                                                              "durationMs": 86400000,
                                                              "createdTime": "2018-05-04T23:43:37.804Z",
                                                              "isInitialTime": false,
                                                              "grain": 1,
                                                              "useDashboardTimeRange": false
                                                            }
                                                          },
                                                          "isOptional": true
                                                        },
                                                        {
                                                          "name": "ConfigurationId",
                                                          "value": "2a8ede4f-2bee-4b9c-aed9-2db0e8a01865",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/CuratedBladePerformancePinnedPart",
                                                      "isAdapter": true,
                                                      "asset": {
                                                        "idInputName": "ResourceId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "performance"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 12,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Browser",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 15,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "MetricsExplorerJsonDefinitionId",
                                                          "value": "BrowserPerformanceTimelineMetrics"
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "createdTime": "2018-05-08T12:16:27.534Z",
                                                            "isInitialTime": false,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        },
                                                        {
                                                          "name": "CurrentFilter",
                                                          "value": {
                                                            "eventTypes": [
                                                              4,
                                                              1,
                                                              3,
                                                              5,
                                                              2,
                                                              6,
                                                              13
                                                            ],
                                                            "typeFacets": {},
                                                            "isPermissive": false
                                                          }
                                                        },
                                                        {
                                                          "name": "id",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/MetricsExplorerBladePinnedPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "browser"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "sessions/count",
                                                                  "aggregationType": 5,
                                                                  "namespace": "microsoft.insights/components/kusto",
                                                                  "metricVisualization": {
                                                                    "displayName": "Sessions",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "users/count",
                                                                  "aggregationType": 5,
                                                                  "namespace": "microsoft.insights/components/kusto",
                                                                  "metricVisualization": {
                                                                    "displayName": "Users",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Unique sessions and users",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "segmentationUsers"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "requests/failed",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Failed requests",
                                                                    "color": "#EC008C"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Failed requests",
                                                              "visualization": {
                                                                "chartType": 3,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "failures"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "requests/duration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Server response time",
                                                                    "color": "#00BCF2"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Server response time",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "performance"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 12,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/networkDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Page load network connect time",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/processingDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Client processing time",
                                                                    "color": "#44F1C8"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/sendDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Send request time",
                                                                    "color": "#EB9371"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/receiveDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Receiving response time",
                                                                    "color": "#0672F1"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average page load time breakdown",
                                                              "visualization": {
                                                                "chartType": 3,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "availabilityResults/availabilityPercentage",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Availability",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average availability",
                                                              "visualization": {
                                                                "chartType": 3,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "availability"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "exceptions/server",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Server exceptions",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "dependencies/failed",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Dependency failures",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Server exceptions and Dependency failures",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/processorCpuPercentage",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Processor time",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/processCpuPercentage",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Process CPU",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average processor and process CPU utilization",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 12,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "exceptions/browser",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Browser exceptions",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Browser exceptions",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 8,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "availabilityResults/count",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Availability test results count",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Availability test results count",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 8,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/processIOBytesPerSecond",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Process IO rate",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average process I/O rate",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 8,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/memoryAvailableBytes",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Available memory",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average available memory",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "12676032921679464791"
                                            },
                                            "name": "Portal Dashboards",
                                            "description": "This module deploys a Portal Dashboard.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the dashboard to create."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "lenses": {
                                              "type": "array",
                                              "items": {
                                                "type": "object"
                                              },
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. The dashboard lenses."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The dashboard metadata."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.portal-dashboard.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "dashboard": {
                                              "type": "Microsoft.Portal/dashboards",
                                              "apiVersion": "2020-09-01-preview",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "lenses": "[parameters('lenses')]",
                                                "metadata": "[parameters('metadata')]"
                                              }
                                            },
                                            "dashboard_roleAssignments": {
                                              "copy": {
                                                "name": "dashboard_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Portal/dashboards/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Portal/dashboards', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "dashboard"
                                              ]
                                            },
                                            "dashboard_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Portal/dashboards/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "dashboard"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the dashboard."
                                              },
                                              "value": "[resourceId('Microsoft.Portal/dashboards', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the dashboard was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the dashboard."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the dashboard was deployed into."
                                              },
                                              "value": "[reference('dashboard', '2020-09-01-preview', 'full').location]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "dashboardResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the dashboard."
                                      },
                                      "value": "[reference('dashboard').outputs.resourceId.value]"
                                    },
                                    "dashboardName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource name of the dashboard."
                                      },
                                      "value": "[reference('dashboard').outputs.name.value]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "applicationInsights"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the application insights components were deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "applicationInsightsName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.name.value]"
                            },
                            "dashboardName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource name of the dashboard."
                              },
                              "value": "[if(not(empty(parameters('dashboardName'))), reference('applicationInsightsDashboard').outputs.dashboardName.value, '')]"
                            },
                            "applicationInsightsResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.resourceId.value]"
                            },
                            "dashboardResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the dashboard."
                              },
                              "value": "[if(not(empty(parameters('dashboardName'))), reference('applicationInsightsDashboard').outputs.dashboardResourceId.value, '')]"
                            },
                            "applicationInsightsConnectionString": {
                              "type": "string",
                              "metadata": {
                                "description": "The connection string of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.connectionString.value]"
                            },
                            "applicationInsightsInstrumentationKey": {
                              "type": "string",
                              "metadata": {
                                "description": "The instrumentation key of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.instrumentationKey.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalytics"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the operational-insights monitoring was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "applicationInsightsConnectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The connection string of the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsConnectionString.value]"
                    },
                    "applicationInsightsResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsResourceId.value]"
                    },
                    "applicationInsightsInstrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The instrumentation key for the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsInstrumentationKey.value]"
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsName.value]"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the loganalytics workspace."
                      },
                      "value": "[reference('logAnalytics').outputs.resourceId.value]"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the log analytics workspace."
                      },
                      "value": "[reference('logAnalytics').outputs.name.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('uai-app-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "998408512764899332"
                    },
                    "name": "User Assigned Identities",
                    "description": "This module deploys a User Assigned Identity.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "federatedIdentityCredentialsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the federated identity credential."
                            }
                          },
                          "audiences": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. The list of audiences that can appear in the issued token."
                            }
                          },
                          "issuer": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The URL of the issuer to be trusted."
                            }
                          },
                          "subject": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The identifier of the external identity."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the User Assigned Identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "federatedIdentityCredentials": {
                      "$ref": "#/definitions/federatedIdentityCredentialsType",
                      "metadata": {
                        "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.2.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "userAssignedIdentity": {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    "userAssignedIdentity_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_roleAssignments": {
                      "copy": {
                        "name": "userAssignedIdentity_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_federatedIdentityCredentials": {
                      "copy": {
                        "name": "userAssignedIdentity_federatedIdentityCredentials",
                        "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[parameters('name')]"
                          },
                          "audiences": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                          },
                          "issuer": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                          },
                          "subject": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4317497001099502136"
                            },
                            "name": "User Assigned Identity Federated Identity Credential",
                            "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "userAssignedIdentityName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "audiences": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                              }
                            },
                            "issuer": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                              }
                            },
                            "subject": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                              "apiVersion": "2023-01-31",
                              "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                              "properties": {
                                "audiences": "[parameters('audiences')]",
                                "issuer": "[parameters('issuer')]",
                                "subject": "[parameters('subject')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the federated identity credential."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the federated identity credential."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the federated identity credential was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned identity."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID (object ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').principalId]"
                    },
                    "clientId": {
                      "type": "string",
                      "metadata": {
                        "description": "The client ID (application ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').clientId]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the user assigned identity was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[toLower(replace(format('registry-{0}-{1}', variables('name'), variables('uniqueSuffix')), '-', ''))]"
                  },
                  "acrAdminUserEnabled": {
                    "value": false
                  },
                  "publicNetworkAccess": {
                    "value": "Enabled"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "roleAssignments": {
                    "value": [
                      {
                        "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionIdOrName": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "14346813384269118868"
                    },
                    "name": "Azure Container Registries (ACR)",
                    "description": "This module deploys an Azure Container Registry (ACR).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "service": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                            }
                          },
                          "privateDnsZoneResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint ip address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private ip addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private ip address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "manualPrivateLinkServiceConnections": {
                            "type": "array",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Manual PrivateLink Service Connections."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customerManagedKeyType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                          }
                        },
                        "keyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the customer managed key to use for encryption."
                          }
                        },
                        "keyVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                          }
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 5,
                      "maxLength": 50,
                      "metadata": {
                        "description": "Required. Name of your Azure Container Registry."
                      }
                    },
                    "acrAdminUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable admin user that have push / pull permission to the registry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "acrSku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Premium",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of your Azure container registry."
                      }
                    },
                    "exportPolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the export policy is enabled or not."
                      }
                    },
                    "quarantinePolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the quarantine policy is enabled or not."
                      }
                    },
                    "trustPolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the trust policy is enabled or not."
                      }
                    },
                    "retentionPolicyStatus": {
                      "type": "string",
                      "defaultValue": "enabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the retention policy is enabled or not."
                      }
                    },
                    "retentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 15,
                      "metadata": {
                        "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                      }
                    },
                    "azureADAuthenticationAsArmPolicyStatus": {
                      "type": "string",
                      "defaultValue": "enabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy for using ARM audience token for a container registr is enabled or not. Default is enabled."
                      }
                    },
                    "softDeletePolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Soft Delete policy status. Default is disabled."
                      }
                    },
                    "softDeletePolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "metadata": {
                        "description": "Optional. The number of days after which a soft-deleted item is permanently deleted."
                      }
                    },
                    "dataEndpointEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access. Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkRuleSetIpRules are not set.  Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "networkRuleBypassOptions": {
                      "type": "string",
                      "defaultValue": "AzureServices",
                      "allowedValues": [
                        "AzureServices",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
                      }
                    },
                    "networkRuleSetDefaultAction": {
                      "type": "string",
                      "defaultValue": "Deny",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Optional. The default action of allow or deny when no other rules match."
                      }
                    },
                    "networkRuleSetIpRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The IP ACL rules. Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "zoneRedundancy": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                      }
                    },
                    "replications": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All replications to create."
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All webhooks to create."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "anonymousPullEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables registry-wide pull from unauthenticated clients. It's in preview and available in the Standard and Premium service tiers."
                      }
                    },
                    "customerManagedKey": {
                      "$ref": "#/definitions/customerManagedKeyType",
                      "metadata": {
                        "description": "Optional. The customer managed key definition."
                      }
                    },
                    "cacheRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of Cache Rules. Note: This is a preview feature ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache#cache-for-acr-preview))."
                      }
                    }
                  },
                  "variables": {
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                      "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                      "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                      "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                      "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "cMKKeyVault::cMKKey": {
                      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2023-02-01",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                      "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
                      "dependsOn": [
                        "cMKKeyVault"
                      ]
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.containerregistry-registry.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "cMKKeyVault": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
                    },
                    "cMKUserAssignedIdentity": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
                    },
                    "registry": {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2023-06-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('acrSku')]"
                      },
                      "properties": {
                        "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                        "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('status', 'enabled', 'keyVaultProperties', createObject('identity', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyIdentifier', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, parameters('customerManagedKey').keyVersion), reference('cMKKeyVault::cMKKey').keyUriWithVersion))), null())]",
                        "policies": {
                          "azureADAuthenticationAsArmPolicy": {
                            "status": "[parameters('azureADAuthenticationAsArmPolicyStatus')]"
                          },
                          "exportPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('exportPolicyStatus')), null())]",
                          "quarantinePolicy": {
                            "status": "[parameters('quarantinePolicyStatus')]"
                          },
                          "trustPolicy": {
                            "type": "Notary",
                            "status": "[parameters('trustPolicyStatus')]"
                          },
                          "retentionPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('days', parameters('retentionPolicyDays'), 'status', parameters('retentionPolicyStatus')), null())]",
                          "softDeletePolicy": {
                            "retentionDays": "[parameters('softDeletePolicyDays')]",
                            "status": "[parameters('softDeletePolicyStatus')]"
                          }
                        },
                        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSetIpRules'))), 'Disabled', null()))]",
                        "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                        "networkRuleSet": "[if(not(empty(parameters('networkRuleSetIpRules'))), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', parameters('networkRuleSetIpRules')), null())]",
                        "zoneRedundancy": "[if(equals(parameters('acrSku'), 'Premium'), parameters('zoneRedundancy'), null())]"
                      },
                      "dependsOn": [
                        "cMKKeyVault",
                        "cMKUserAssignedIdentity"
                      ]
                    },
                    "registry_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_diagnosticSettings": {
                      "copy": {
                        "name": "registry_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_roleAssignments": {
                      "copy": {
                        "name": "registry_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_replications": {
                      "copy": {
                        "name": "registry_replications",
                        "count": "[length(coalesce(parameters('replications'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Registry-Replication-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].name]"
                          },
                          "registryName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].location]"
                          },
                          "regionEndpointEnabled": {
                            "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'regionEndpointEnabled')]"
                          },
                          "zoneRedundancy": {
                            "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'zoneRedundancy')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "10714256463183699741"
                            },
                            "name": "Azure Container Registry (ACR) Replications",
                            "description": "This module deploys an Azure Container Registry (ACR) Replication.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "registryName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the replication."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "regionEndpointEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies whether the replication regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications."
                              }
                            },
                            "zoneRedundancy": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                              }
                            }
                          },
                          "resources": {
                            "registry": {
                              "existing": true,
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('registryName')]"
                            },
                            "replication": {
                              "type": "Microsoft.ContainerRegistry/registries/replications",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "regionEndpointEnabled": "[parameters('regionEndpointEnabled')]",
                                "zoneRedundancy": "[parameters('zoneRedundancy')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the replication."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the replication."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries/replications', parameters('registryName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the replication was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('replication', '2023-06-01-preview', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_cacheRules": {
                      "copy": {
                        "name": "registry_cacheRules",
                        "count": "[length(coalesce(parameters('cacheRules'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Registry-Cache-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "registryName": {
                            "value": "[parameters('name')]"
                          },
                          "sourceRepository": {
                            "value": "[coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository]"
                          },
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'name'), replace(replace(coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository, '/', '-'), '.', '-'))]"
                          },
                          "targetRepository": {
                            "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'targetRepository'), coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository)]"
                          },
                          "credentialSetResourceId": {
                            "value": "[tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'credentialSetResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6942960102258463312"
                            },
                            "name": "Container Registries Cache",
                            "description": "Cache for Azure Container Registry (Preview) feature allows users to cache container images in a private container registry. Cache for ACR, is a preview feature available in Basic, Standard, and Premium service tiers ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache)).",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "registryName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent registry. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[replace(replace(parameters('sourceRepository'), '/', '-'), '.', '-')]",
                              "metadata": {
                                "description": "Optional. The name of the cache rule. Will be dereived from the source repository name if not defined."
                              }
                            },
                            "sourceRepository": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Source repository pulled from upstream."
                              }
                            },
                            "targetRepository": {
                              "type": "string",
                              "defaultValue": "[parameters('sourceRepository')]",
                              "metadata": {
                                "description": "Optional. Target repository specified in docker pull command. E.g.: docker pull myregistry.azurecr.io/{targetRepository}:{tag}."
                              }
                            },
                            "credentialSetResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the credential store which is associated with the cache rule."
                              }
                            }
                          },
                          "resources": {
                            "registry": {
                              "existing": true,
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('registryName')]"
                            },
                            "cacheRule": {
                              "type": "Microsoft.ContainerRegistry/registries/cacheRules",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                              "properties": {
                                "sourceRepository": "[parameters('sourceRepository')]",
                                "targetRepository": "[parameters('targetRepository')]",
                                "credentialSetResourceId": "[parameters('credentialSetResourceId')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the Cache Rule."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Cache Rule."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Cache Rule."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries/cacheRules', parameters('registryName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_webhooks": {
                      "copy": {
                        "name": "registry_webhooks",
                        "count": "[length(coalesce(parameters('webhooks'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Registry-Webhook-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].name]"
                          },
                          "registryName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'location'), parameters('location'))]"
                          },
                          "action": {
                            "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'action'), createArray('chart_delete', 'chart_push', 'delete', 'push', 'quarantine'))]"
                          },
                          "customHeaders": {
                            "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'customHeaders')]"
                          },
                          "scope": {
                            "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'scope')]"
                          },
                          "status": {
                            "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'status')]"
                          },
                          "serviceUri": {
                            "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].serviceUri]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "3986666280667981658"
                            },
                            "name": "Azure Container Registry (ACR) Webhooks",
                            "description": "This module deploys an Azure Container Registry (ACR) Webhook.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "registryName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}webhook', parameters('registryName'))]",
                              "minLength": 5,
                              "maxLength": 50,
                              "metadata": {
                                "description": "Optional. The name of the registry webhook."
                              }
                            },
                            "serviceUri": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The service URI for the webhook to post notifications."
                              }
                            },
                            "status": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The status of the webhook at the time the operation was called."
                              }
                            },
                            "action": {
                              "type": "array",
                              "defaultValue": [
                                "chart_delete",
                                "chart_push",
                                "delete",
                                "push",
                                "quarantine"
                              ],
                              "metadata": {
                                "description": "Optional. The list of actions that trigger the webhook to post notifications."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "customHeaders": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom headers that will be added to the webhook notifications."
                              }
                            },
                            "scope": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events."
                              }
                            }
                          },
                          "resources": {
                            "registry": {
                              "existing": true,
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('registryName')]"
                            },
                            "webhook": {
                              "type": "Microsoft.ContainerRegistry/registries/webhooks",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "actions": "[parameters('action')]",
                                "customHeaders": "[parameters('customHeaders')]",
                                "scope": "[parameters('scope')]",
                                "serviceUri": "[parameters('serviceUri')]",
                                "status": "[parameters('status')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the webhook."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries/webhooks', parameters('registryName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the webhook."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure container registry."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "actions": {
                              "type": "array",
                              "metadata": {
                                "description": "The actions of the webhook."
                              },
                              "value": "[reference('webhook').actions]"
                            },
                            "status": {
                              "type": "string",
                              "metadata": {
                                "description": "The status of the webhook."
                              },
                              "value": "[reference('webhook').status]"
                            },
                            "provistioningState": {
                              "type": "string",
                              "metadata": {
                                "description": "The provisioning state of the webhook."
                              },
                              "value": "[reference('webhook').provisioningState]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('webhook', '2023-06-01-preview', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_privateEndpoints": {
                      "copy": {
                        "name": "registry_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-registry-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateLinkServiceConnections": {
                            "value": [
                              {
                                "name": "[parameters('name')]",
                                "properties": {
                                  "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
                                  "groupIds": [
                                    "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry')]"
                                  ]
                                }
                              }
                            ]
                          },
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex()))]"
                          },
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroupName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                          },
                          "privateDnsZoneResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "manualPrivateLinkServiceConnections": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections')]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.23.1.45101",
                              "templateHash": "2821141217598568122"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                              }
                            },
                            "privateDnsZoneResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.3.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                  },
                                  "privateDNSResourceIds": {
                                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.23.1.45101",
                                      "templateHash": "18168683629401652671"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the Azure container registry."
                      },
                      "value": "[parameters('name')]"
                    },
                    "loginServer": {
                      "type": "string",
                      "metadata": {
                        "description": "The reference to the Azure container registry."
                      },
                      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure container registry."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure container registry."
                      },
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('registry', '2023-06-01-preview', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('registry', '2023-06-01-preview', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                  },
                  "name": {
                    "value": "[toLower(format('managedEnv-{0}-{1}', variables('name'), variables('uniqueSuffix')))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "zoneRedundant": {
                    "value": false
                  },
                  "appInsightsConnectionString": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
                  },
                  "openTelemetryConfiguration": {
                    "value": {
                      "logsConfiguration": {
                        "destinations": [
                          "appInsights"
                        ]
                      },
                      "tracesConfiguration": {
                        "destinations": [
                          "appInsights"
                        ]
                      }
                    }
                  },
                  "workloadProfiles": {
                    "value": [
                      {
                        "name": "Consumption",
                        "workloadProfileType": "Consumption"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "8489047480987554955"
                    },
                    "name": "App ManagedEnvironments",
                    "description": "This module deploys an App Managed Environment (also known as a Container App Environment).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "certificateKeyVaultPropertiesType": {
                      "type": "object",
                      "properties": {
                        "identityResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the identity. This is the identity that will be used to access the key vault."
                          }
                        },
                        "keyVaultUrl": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. A key vault URL referencing the wildcard certificate that will be used for the custom domain."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "storageType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "accessMode": {
                            "type": "string",
                            "allowedValues": [
                              "ReadOnly",
                              "ReadWrite"
                            ],
                            "metadata": {
                              "description": "Required. Access mode for storage: \"ReadOnly\" or \"ReadWrite\"."
                            }
                          },
                          "kind": {
                            "type": "string",
                            "allowedValues": [
                              "NFS",
                              "SMB"
                            ],
                            "metadata": {
                              "description": "Required. Type of storage: \"SMB\" or \"NFS\"."
                            }
                          },
                          "storageAccountName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Storage account name."
                            }
                          },
                          "shareName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. File share name."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container Apps Managed Environment."
                      }
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Existing Log Analytics Workspace resource ID. Note: This value is not required as per the resource type. However, not providing it currently causes an issue that is tracked [here](https://github.com/Azure/bicep/issues/9990)."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "logsDestination": {
                      "type": "string",
                      "defaultValue": "log-analytics",
                      "metadata": {
                        "description": "Optional. Logs destination."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "appInsightsConnectionString": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Application Insights connection string."
                      }
                    },
                    "daprAIConnectionString": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Application Insights connection string used by Dapr to export Service to Service communication telemetry."
                      }
                    },
                    "daprAIInstrumentationKey": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry."
                      }
                    },
                    "dockerBridgeCidr": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. CIDR notation IP range assigned to the Docker bridge, network. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "infrastructureSubnetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. Resource ID of a subnet for infrastructure components. This is used to deploy the environment into a virtual network. Must not overlap with any other provided IP ranges. Required if \"internal\" is set to true. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "internal": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Conditional. Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. If set to true, then \"infrastructureSubnetId\" must be provided. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "platformReservedCidr": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true  to make the resource WAF compliant."
                      }
                    },
                    "platformReservedDnsIP": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. An IP address from the IP range defined by \"platformReservedCidr\" that will be reserved for the internal DNS server. It must not be the first address in the range and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "peerTrafficEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether or not to encrypt peer traffic."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether or not this Managed Environment is zone-redundant."
                      }
                    },
                    "certificatePassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Password of the certificate used by the custom domain."
                      }
                    },
                    "certificateValue": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Certificate to use for the custom domain. PFX or PEM."
                      }
                    },
                    "certificateKeyVaultProperties": {
                      "$ref": "#/definitions/certificateKeyVaultPropertiesType",
                      "metadata": {
                        "description": "Optional. A key vault reference to the certificate to use for the custom domain."
                      }
                    },
                    "dnsSuffix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. DNS suffix for the environment domain."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "openTelemetryConfiguration": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Open Telemetry configuration."
                      }
                    },
                    "workloadProfiles": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Conditional. Workload profiles configured for the Managed Environment. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "infrastructureResourceGroupName": {
                      "type": "string",
                      "defaultValue": "[take(format('ME_{0}', parameters('name')), 63)]",
                      "metadata": {
                        "description": "Conditional. Name of the infrastructure resource group. If not provided, it will be set with a default value. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "storages": {
                      "$ref": "#/definitions/storageType",
                      "metadata": {
                        "description": "Optional. The list of storages to mount on the environment."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "managedEnvironment::storage": {
                      "copy": {
                        "name": "storage",
                        "count": "[length(coalesce(parameters('storages'), createArray()))]"
                      },
                      "type": "Microsoft.App/managedEnvironments/storages",
                      "apiVersion": "2024-02-02-preview",
                      "name": "[format('{0}/{1}', parameters('name'), coalesce(parameters('storages'), createArray())[copyIndex()].shareName)]",
                      "properties": {
                        "nfsAzureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'NFS'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'server', format('{0}.file.{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, environment().suffixes.storage), 'shareName', format('/{0}/{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, coalesce(parameters('storages'), createArray())[copyIndex()].shareName)), null())]",
                        "azureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'SMB'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'accountName', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, 'accountKey', listkeys(resourceId('Microsoft.Storage/storageAccounts', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName), '2023-01-01').keys[0].value, 'shareName', coalesce(parameters('storages'), createArray())[copyIndex()].shareName), null())]"
                      },
                      "dependsOn": [
                        "managedEnvironment"
                      ]
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.app-managedenvironment.{0}.{1}', replace('0.8.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalyticsWorkspace": {
                      "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2023-09-01",
                      "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))]"
                    },
                    "managedEnvironment": {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2024-02-02-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "appInsightsConfiguration": {
                          "connectionString": "[parameters('appInsightsConnectionString')]"
                        },
                        "appLogsConfiguration": {
                          "destination": "[parameters('logsDestination')]",
                          "logAnalyticsConfiguration": {
                            "customerId": "[reference('logAnalyticsWorkspace').customerId]",
                            "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))), '2023-09-01').primarySharedKey]"
                          }
                        },
                        "daprAIConnectionString": "[parameters('daprAIConnectionString')]",
                        "daprAIInstrumentationKey": "[parameters('daprAIInstrumentationKey')]",
                        "customDomainConfiguration": {
                          "certificatePassword": "[parameters('certificatePassword')]",
                          "certificateValue": "[if(not(empty(parameters('certificateValue'))), parameters('certificateValue'), null())]",
                          "dnsSuffix": "[parameters('dnsSuffix')]",
                          "certificateKeyVaultProperties": "[if(not(empty(parameters('certificateKeyVaultProperties'))), createObject('identity', parameters('certificateKeyVaultProperties').identityResourceId, 'keyVaultUrl', parameters('certificateKeyVaultProperties').keyVaultUrl), null())]"
                        },
                        "openTelemetryConfiguration": "[if(not(empty(parameters('openTelemetryConfiguration'))), parameters('openTelemetryConfiguration'), null())]",
                        "peerTrafficConfiguration": {
                          "encryption": {
                            "enabled": "[parameters('peerTrafficEncryption')]"
                          }
                        },
                        "vnetConfiguration": {
                          "internal": "[parameters('internal')]",
                          "infrastructureSubnetId": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('infrastructureSubnetId'), null())]",
                          "dockerBridgeCidr": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('dockerBridgeCidr'), null())]",
                          "platformReservedCidr": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedCidr'), null())]",
                          "platformReservedDnsIP": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedDnsIP'), null())]"
                        },
                        "workloadProfiles": "[if(not(empty(parameters('workloadProfiles'))), parameters('workloadProfiles'), null())]",
                        "zoneRedundant": "[parameters('zoneRedundant')]",
                        "infrastructureResourceGroup": "[parameters('infrastructureResourceGroupName')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "managedEnvironment_roleAssignments": {
                      "copy": {
                        "name": "managedEnvironment_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/managedEnvironments', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "managedEnvironment"
                      ]
                    },
                    "managedEnvironment_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "managedEnvironment"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Managed Environment was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('managedEnvironment', '2024-02-02-preview', 'full').location]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Managed Environment."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Managed Environment."
                      },
                      "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('managedEnvironment', '2024-02-02-preview', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "defaultDomain": {
                      "type": "string",
                      "metadata": {
                        "description": "The Default domain of the Managed Environment."
                      },
                      "value": "[reference('managedEnvironment').defaultDomain]"
                    },
                    "staticIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The IP address of the Managed Environment."
                      },
                      "value": "[reference('managedEnvironment').staticIp]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "frontend-fetch-image",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": "[parameters('frontendExists')]"
                  },
                  "name": {
                    "value": "[variables('frontendContainerName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "9643843979796575983"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "backend-fetch-image",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": "[parameters('backendExists')]"
                  },
                  "name": {
                    "value": "[variables('backendContainerName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "9643843979796575983"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('frontendContainerName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('frontendContainerName')]"
                  },
                  "environmentResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "containers": {
                    "value": [
                      {
                        "name": "[variables('frontendContainerName')]",
                        "image": "[if(parameters('frontendExists'), reference(resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image'), '2022-09-01').outputs.containers.value[0].image, 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                        "command": [],
                        "args": [],
                        "resources": {
                          "cpu": "[json('2.0')]",
                          "memory": "4Gi"
                        },
                        "env": [
                          {
                            "name": "AZURE_CLIENT_ID",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.clientId.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_API_VERSION",
                            "value": "[parameters('openAiApiVersion')]"
                          },
                          {
                            "name": "AZURE_OPENAI_EMBEDDING_DEPLOYMENT",
                            "value": "[parameters('embeddingModel').name]"
                          },
                          {
                            "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_ID",
                            "value": "[parameters('chatCompletionModels')[0].name]"
                          },
                          {
                            "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_01",
                            "value": "[parameters('chatCompletionModels')[0].name]"
                          },
                          {
                            "name": "AZURE_OPENAI_EMBEDDING_DIMENSIONS",
                            "value": "[parameters('embeddingModelDimension')]"
                          },
                          {
                            "name": "AZURE_SEARCH_SERVICE_NAME",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
                          },
                          {
                            "name": "AZURE_SEARCH_INDEX_NAME",
                            "value": "ai-policies-index"
                          },
                          {
                            "name": "AZURE_AI_SEARCH_SERVICE_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceEndpoint.value]"
                          },
                          {
                            "name": "AZURE_BLOB_CONTAINER_NAME",
                            "value": "[parameters('storageBlobContainerName')]"
                          },
                          {
                            "name": "AZURE_STORAGE_ACCOUNT_NAME",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                          },
                          {
                            "name": "AZURE_COSMOS_DB_DATABASE_NAME",
                            "value": "[parameters('cosmosDbDatabaseName')]"
                          },
                          {
                            "name": "AZURE_COSMOS_DB_COLLECTION_NAME",
                            "value": "[parameters('cosmosDbCollectionName')]"
                          },
                          {
                            "name": "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                          },
                          {
                            "name": "AZURE_AI_SEARCH_ADMIN_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServicePrimaryKey.value]"
                          },
                          {
                            "name": "AZURE_STORAGE_CONNECTION_STRING",
                            "value": "[format('ResourceId={0}', reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountId.value)]"
                          },
                          {
                            "name": "AZURE_AI_SERVICES_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesPrimaryKey.value]"
                          },
                          {
                            "name": "AZURE_COSMOS_CONNECTION_STRING",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.mongoConnectionString.value]"
                          },
                          {
                            "name": "AZURE_DOCUMENT_INTELLIGENCE_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                          },
                          {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
                          }
                        ]
                      }
                    ]
                  },
                  "scaleMinReplicas": {
                    "value": 1
                  },
                  "scaleMaxReplicas": {
                    "value": 3
                  },
                  "ingressTargetPort": {
                    "value": 8501
                  },
                  "registries": {
                    "value": [
                      {
                        "identity": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]",
                        "server": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.loginServer.value]"
                      }
                    ]
                  },
                  "managedIdentities": {
                    "value": {
                      "userAssignedResourceIds": [
                        "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
                      ]
                    }
                  },
                  "workloadProfileName": {
                    "value": "Consumption"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', 'frontend'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1881400703735414059"
                    },
                    "name": "Container Apps",
                    "description": "This module deploys a Container App.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "container": {
                      "type": "object",
                      "properties": {
                        "args": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command arguments."
                          }
                        },
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command."
                          }
                        },
                        "env": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/environmentVar"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container environment variables."
                          }
                        },
                        "image": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Container image tag."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom container name."
                          }
                        },
                        "probes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbe"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of probes for the container."
                          }
                        },
                        "resources": {
                          "type": "object",
                          "metadata": {
                            "description": "Required. Container resource requirements."
                          }
                        },
                        "volumeMounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/volumeMount"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container volume mounts."
                          }
                        }
                      }
                    },
                    "ingressPortMapping": {
                      "type": "object",
                      "properties": {
                        "exposedPort": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the exposed port for the target port. If not specified, it defaults to target port."
                          }
                        },
                        "external": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Specifies whether the app port is accessible outside of the environment."
                          }
                        },
                        "targetPort": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. Specifies the port the container listens on."
                          }
                        }
                      }
                    },
                    "serviceBind": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the service."
                          }
                        },
                        "serviceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The service ID."
                          }
                        }
                      }
                    },
                    "environmentVar": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Environment variable name."
                          }
                        },
                        "secretRef": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                          }
                        },
                        "value": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Non-secret environment variable value."
                          }
                        }
                      }
                    },
                    "containerAppProbe": {
                      "type": "object",
                      "properties": {
                        "failureThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                          }
                        },
                        "httpGet": {
                          "$ref": "#/definitions/containerAppProbeHttpGet",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTPGet specifies the http request to perform."
                          }
                        },
                        "initialDelaySeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 60,
                          "metadata": {
                            "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                          }
                        },
                        "periodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                          }
                        },
                        "successThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                          }
                        },
                        "tcpSocket": {
                          "$ref": "#/definitions/containerAppProbeTcpSocket",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                          }
                        },
                        "terminationGracePeriodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                          }
                        },
                        "timeoutSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "Liveness",
                            "Readiness",
                            "Startup"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The type of probe."
                          }
                        }
                      }
                    },
                    "corsPolicyType": {
                      "type": "object",
                      "properties": {
                        "allowCredentials": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Switch to determine whether the resource allows credentials."
                          }
                        },
                        "allowedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-headers header."
                          }
                        },
                        "allowedMethods": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-methods header."
                          }
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-origins header."
                          }
                        },
                        "exposeHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-expose-headers header."
                          }
                        },
                        "maxAge": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-max-age header."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "containerAppProbeHttpGet": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to. Defaults to the pod IP."
                          }
                        },
                        "httpHeaders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTP headers to set in the request."
                          }
                        },
                        "path": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path to access on the HTTP server."
                          }
                        },
                        "port": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. Name or number of the port to access on the container."
                          }
                        },
                        "scheme": {
                          "type": "string",
                          "allowedValues": [
                            "HTTP",
                            "HTTPS"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                          }
                        }
                      }
                    },
                    "containerAppProbeHttpGetHeadersItem": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the header."
                          }
                        },
                        "value": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Value of the header."
                          }
                        }
                      }
                    },
                    "containerAppProbeTcpSocket": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to, defaults to the pod IP."
                          }
                        },
                        "port": {
                          "type": "int",
                          "minValue": 1,
                          "maxValue": 65535,
                          "metadata": {
                            "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                          }
                        }
                      }
                    },
                    "volumeMount": {
                      "type": "object",
                      "properties": {
                        "mountPath": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                          }
                        },
                        "subPath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                          }
                        },
                        "volumeName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. This must match the Name of a Volume."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container App."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "disableIngress": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Bool to disable all ingress traffic for the container app."
                      }
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                      }
                    },
                    "clientCertificateMode": {
                      "type": "string",
                      "defaultValue": "ignore",
                      "allowedValues": [
                        "accept",
                        "ignore",
                        "require"
                      ],
                      "metadata": {
                        "description": "Optional. Client certificate mode for mTLS."
                      }
                    },
                    "corsPolicy": {
                      "$ref": "#/definitions/corsPolicyType",
                      "metadata": {
                        "description": "Optional. Object userd to configure CORS policy."
                      }
                    },
                    "stickySessionsAffinity": {
                      "type": "string",
                      "defaultValue": "none",
                      "allowedValues": [
                        "none",
                        "sticky"
                      ],
                      "metadata": {
                        "description": "Optional. Bool indicating if the Container App should enable session affinity."
                      }
                    },
                    "ingressTransport": {
                      "type": "string",
                      "defaultValue": "auto",
                      "allowedValues": [
                        "auto",
                        "http",
                        "http2",
                        "tcp"
                      ],
                      "metadata": {
                        "description": "Optional. Ingress transport protocol."
                      }
                    },
                    "service": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Dev ContainerApp service type."
                      }
                    },
                    "includeAddOns": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Toggle to include the service configuration."
                      }
                    },
                    "additionalPortMappings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ingressPortMapping"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Settings to expose additional ports on container app."
                      }
                    },
                    "ingressAllowInsecure": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                      }
                    },
                    "ingressTargetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "Optional. Target Port in containers for traffic from ingress."
                      }
                    },
                    "scaleMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                      }
                    },
                    "scaleMinReplicas": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                      }
                    },
                    "scaleRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Scaling rules."
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/serviceBind"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of container app services bound to the app."
                      }
                    },
                    "activeRevisionsMode": {
                      "type": "string",
                      "defaultValue": "Single",
                      "allowedValues": [
                        "Multiple",
                        "Single"
                      ],
                      "metadata": {
                        "description": "Optional. Controls how active revisions are handled for the Container app."
                      }
                    },
                    "environmentResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of environment."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom domain bindings for Container App hostnames."
                      }
                    },
                    "exposedPort": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rules to restrict incoming IP address."
                      }
                    },
                    "trafficLabel": {
                      "type": "string",
                      "defaultValue": "label-1",
                      "metadata": {
                        "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                      }
                    },
                    "trafficLatestRevision": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                      }
                    },
                    "trafficRevisionName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of a revision."
                      }
                    },
                    "trafficWeight": {
                      "type": "int",
                      "defaultValue": 100,
                      "metadata": {
                        "description": "Optional. Traffic weight assigned to a revision."
                      }
                    },
                    "dapr": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Dapr configuration for the Container App."
                      }
                    },
                    "maxInactiveRevisions": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Max inactive revisions a Container App can have."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/container"
                      },
                      "metadata": {
                        "description": "Required. List of container definitions for the Container App."
                      }
                    },
                    "initContainersTemplate": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of specialized containers that run before app containers."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The secrets of the Container App."
                      }
                    },
                    "revisionSuffix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. User friendly suffix that is appended to the revision name."
                      }
                    },
                    "volumes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of volume definitions for the Container App."
                      }
                    },
                    "workloadProfileName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Workload profile name to pin for container app execution."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "containerApp": {
                      "type": "Microsoft.App/containerApps",
                      "apiVersion": "2024-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "environmentId": "[parameters('environmentResourceId')]",
                        "configuration": {
                          "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                          "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                          "ingress": "[if(parameters('disableIngress'), null(), createObject('additionalPortMappings', parameters('additionalPortMappings'), 'allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                          "service": "[if(and(parameters('includeAddOns'), not(empty(parameters('service')))), parameters('service'), null())]",
                          "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                          "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                          "secrets": "[variables('secretList')]"
                        },
                        "template": {
                          "containers": "[parameters('containers')]",
                          "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                          "revisionSuffix": "[parameters('revisionSuffix')]",
                          "scale": {
                            "maxReplicas": "[parameters('scaleMaxReplicas')]",
                            "minReplicas": "[parameters('scaleMinReplicas')]",
                            "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                          },
                          "serviceBinds": "[if(and(parameters('includeAddOns'), not(empty(parameters('serviceBinds')))), parameters('serviceBinds'), null())]",
                          "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                        },
                        "workloadProfileName": "[parameters('workloadProfileName')]"
                      }
                    },
                    "containerApp_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    },
                    "containerApp_roleAssignments": {
                      "copy": {
                        "name": "containerApp_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Container App."
                      },
                      "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                    },
                    "fqdn": {
                      "type": "string",
                      "metadata": {
                        "description": "The configuration of ingress fqdn."
                      },
                      "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Container App was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Container App."
                      },
                      "value": "[parameters('name')]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2024-03-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('containerApp', '2024-03-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image')]",
                "[resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('backendContainerName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('backendContainerName')]"
                  },
                  "environmentResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "containers": {
                    "value": [
                      {
                        "name": "[variables('backendContainerName')]",
                        "image": "[if(parameters('backendExists'), reference(resourceId('Microsoft.Resources/deployments', 'backend-fetch-image'), '2022-09-01').outputs.containers.value[0].image, 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                        "command": [],
                        "args": [],
                        "resources": {
                          "cpu": "[json('2.0')]",
                          "memory": "4Gi"
                        },
                        "env": [
                          {
                            "name": "AZURE_CLIENT_ID",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.clientId.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_API_VERSION",
                            "value": "[parameters('openAiApiVersion')]"
                          },
                          {
                            "name": "AZURE_OPENAI_EMBEDDING_DEPLOYMENT",
                            "value": "[parameters('embeddingModel').name]"
                          },
                          {
                            "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_ID",
                            "value": "[parameters('chatCompletionModels')[0].name]"
                          },
                          {
                            "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_01",
                            "value": "[parameters('chatCompletionModels')[0].name]"
                          },
                          {
                            "name": "AZURE_OPENAI_EMBEDDING_DIMENSIONS",
                            "value": "[parameters('embeddingModelDimension')]"
                          },
                          {
                            "name": "AZURE_SEARCH_SERVICE_NAME",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
                          },
                          {
                            "name": "AZURE_SEARCH_INDEX_NAME",
                            "value": "ai-policies-index"
                          },
                          {
                            "name": "AZURE_AI_SEARCH_SERVICE_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceEndpoint.value]"
                          },
                          {
                            "name": "AZURE_BLOB_CONTAINER_NAME",
                            "value": "[parameters('storageBlobContainerName')]"
                          },
                          {
                            "name": "AZURE_STORAGE_ACCOUNT_NAME",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                          },
                          {
                            "name": "AZURE_COSMOS_DB_DATABASE_NAME",
                            "value": "[parameters('cosmosDbDatabaseName')]"
                          },
                          {
                            "name": "AZURE_COSMOS_DB_COLLECTION_NAME",
                            "value": "[parameters('cosmosDbCollectionName')]"
                          },
                          {
                            "name": "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                          },
                          {
                            "name": "AZURE_AI_SEARCH_ADMIN_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServicePrimaryKey.value]"
                          },
                          {
                            "name": "AZURE_STORAGE_CONNECTION_STRING",
                            "value": "[format('ResourceId={0}', reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountId.value)]"
                          },
                          {
                            "name": "AZURE_AI_SERVICES_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesPrimaryKey.value]"
                          },
                          {
                            "name": "AZURE_COSMOS_CONNECTION_STRING",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.mongoConnectionString.value]"
                          },
                          {
                            "name": "AZURE_DOCUMENT_INTELLIGENCE_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                          },
                          {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
                          }
                        ]
                      }
                    ]
                  },
                  "registries": {
                    "value": [
                      {
                        "identity": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]",
                        "server": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.loginServer.value]"
                      }
                    ]
                  },
                  "managedIdentities": {
                    "value": {
                      "userAssignedResourceIds": [
                        "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
                      ]
                    }
                  },
                  "scaleMinReplicas": {
                    "value": 0
                  },
                  "scaleMaxReplicas": {
                    "value": 1
                  },
                  "workloadProfileName": {
                    "value": "Consumption"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', 'backend'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1881400703735414059"
                    },
                    "name": "Container Apps",
                    "description": "This module deploys a Container App.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "container": {
                      "type": "object",
                      "properties": {
                        "args": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command arguments."
                          }
                        },
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command."
                          }
                        },
                        "env": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/environmentVar"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container environment variables."
                          }
                        },
                        "image": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Container image tag."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom container name."
                          }
                        },
                        "probes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbe"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of probes for the container."
                          }
                        },
                        "resources": {
                          "type": "object",
                          "metadata": {
                            "description": "Required. Container resource requirements."
                          }
                        },
                        "volumeMounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/volumeMount"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container volume mounts."
                          }
                        }
                      }
                    },
                    "ingressPortMapping": {
                      "type": "object",
                      "properties": {
                        "exposedPort": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the exposed port for the target port. If not specified, it defaults to target port."
                          }
                        },
                        "external": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Specifies whether the app port is accessible outside of the environment."
                          }
                        },
                        "targetPort": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. Specifies the port the container listens on."
                          }
                        }
                      }
                    },
                    "serviceBind": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the service."
                          }
                        },
                        "serviceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The service ID."
                          }
                        }
                      }
                    },
                    "environmentVar": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Environment variable name."
                          }
                        },
                        "secretRef": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                          }
                        },
                        "value": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Non-secret environment variable value."
                          }
                        }
                      }
                    },
                    "containerAppProbe": {
                      "type": "object",
                      "properties": {
                        "failureThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                          }
                        },
                        "httpGet": {
                          "$ref": "#/definitions/containerAppProbeHttpGet",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTPGet specifies the http request to perform."
                          }
                        },
                        "initialDelaySeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 60,
                          "metadata": {
                            "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                          }
                        },
                        "periodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                          }
                        },
                        "successThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                          }
                        },
                        "tcpSocket": {
                          "$ref": "#/definitions/containerAppProbeTcpSocket",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                          }
                        },
                        "terminationGracePeriodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                          }
                        },
                        "timeoutSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "Liveness",
                            "Readiness",
                            "Startup"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The type of probe."
                          }
                        }
                      }
                    },
                    "corsPolicyType": {
                      "type": "object",
                      "properties": {
                        "allowCredentials": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Switch to determine whether the resource allows credentials."
                          }
                        },
                        "allowedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-headers header."
                          }
                        },
                        "allowedMethods": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-methods header."
                          }
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-origins header."
                          }
                        },
                        "exposeHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-expose-headers header."
                          }
                        },
                        "maxAge": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-max-age header."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "containerAppProbeHttpGet": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to. Defaults to the pod IP."
                          }
                        },
                        "httpHeaders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTP headers to set in the request."
                          }
                        },
                        "path": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path to access on the HTTP server."
                          }
                        },
                        "port": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. Name or number of the port to access on the container."
                          }
                        },
                        "scheme": {
                          "type": "string",
                          "allowedValues": [
                            "HTTP",
                            "HTTPS"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                          }
                        }
                      }
                    },
                    "containerAppProbeHttpGetHeadersItem": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the header."
                          }
                        },
                        "value": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Value of the header."
                          }
                        }
                      }
                    },
                    "containerAppProbeTcpSocket": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to, defaults to the pod IP."
                          }
                        },
                        "port": {
                          "type": "int",
                          "minValue": 1,
                          "maxValue": 65535,
                          "metadata": {
                            "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                          }
                        }
                      }
                    },
                    "volumeMount": {
                      "type": "object",
                      "properties": {
                        "mountPath": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                          }
                        },
                        "subPath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                          }
                        },
                        "volumeName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. This must match the Name of a Volume."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container App."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "disableIngress": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Bool to disable all ingress traffic for the container app."
                      }
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                      }
                    },
                    "clientCertificateMode": {
                      "type": "string",
                      "defaultValue": "ignore",
                      "allowedValues": [
                        "accept",
                        "ignore",
                        "require"
                      ],
                      "metadata": {
                        "description": "Optional. Client certificate mode for mTLS."
                      }
                    },
                    "corsPolicy": {
                      "$ref": "#/definitions/corsPolicyType",
                      "metadata": {
                        "description": "Optional. Object userd to configure CORS policy."
                      }
                    },
                    "stickySessionsAffinity": {
                      "type": "string",
                      "defaultValue": "none",
                      "allowedValues": [
                        "none",
                        "sticky"
                      ],
                      "metadata": {
                        "description": "Optional. Bool indicating if the Container App should enable session affinity."
                      }
                    },
                    "ingressTransport": {
                      "type": "string",
                      "defaultValue": "auto",
                      "allowedValues": [
                        "auto",
                        "http",
                        "http2",
                        "tcp"
                      ],
                      "metadata": {
                        "description": "Optional. Ingress transport protocol."
                      }
                    },
                    "service": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Dev ContainerApp service type."
                      }
                    },
                    "includeAddOns": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Toggle to include the service configuration."
                      }
                    },
                    "additionalPortMappings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ingressPortMapping"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Settings to expose additional ports on container app."
                      }
                    },
                    "ingressAllowInsecure": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                      }
                    },
                    "ingressTargetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "Optional. Target Port in containers for traffic from ingress."
                      }
                    },
                    "scaleMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                      }
                    },
                    "scaleMinReplicas": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                      }
                    },
                    "scaleRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Scaling rules."
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/serviceBind"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of container app services bound to the app."
                      }
                    },
                    "activeRevisionsMode": {
                      "type": "string",
                      "defaultValue": "Single",
                      "allowedValues": [
                        "Multiple",
                        "Single"
                      ],
                      "metadata": {
                        "description": "Optional. Controls how active revisions are handled for the Container app."
                      }
                    },
                    "environmentResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of environment."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom domain bindings for Container App hostnames."
                      }
                    },
                    "exposedPort": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rules to restrict incoming IP address."
                      }
                    },
                    "trafficLabel": {
                      "type": "string",
                      "defaultValue": "label-1",
                      "metadata": {
                        "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                      }
                    },
                    "trafficLatestRevision": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                      }
                    },
                    "trafficRevisionName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of a revision."
                      }
                    },
                    "trafficWeight": {
                      "type": "int",
                      "defaultValue": 100,
                      "metadata": {
                        "description": "Optional. Traffic weight assigned to a revision."
                      }
                    },
                    "dapr": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Dapr configuration for the Container App."
                      }
                    },
                    "maxInactiveRevisions": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Max inactive revisions a Container App can have."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/container"
                      },
                      "metadata": {
                        "description": "Required. List of container definitions for the Container App."
                      }
                    },
                    "initContainersTemplate": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of specialized containers that run before app containers."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The secrets of the Container App."
                      }
                    },
                    "revisionSuffix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. User friendly suffix that is appended to the revision name."
                      }
                    },
                    "volumes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of volume definitions for the Container App."
                      }
                    },
                    "workloadProfileName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Workload profile name to pin for container app execution."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "containerApp": {
                      "type": "Microsoft.App/containerApps",
                      "apiVersion": "2024-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "environmentId": "[parameters('environmentResourceId')]",
                        "configuration": {
                          "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                          "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                          "ingress": "[if(parameters('disableIngress'), null(), createObject('additionalPortMappings', parameters('additionalPortMappings'), 'allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                          "service": "[if(and(parameters('includeAddOns'), not(empty(parameters('service')))), parameters('service'), null())]",
                          "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                          "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                          "secrets": "[variables('secretList')]"
                        },
                        "template": {
                          "containers": "[parameters('containers')]",
                          "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                          "revisionSuffix": "[parameters('revisionSuffix')]",
                          "scale": {
                            "maxReplicas": "[parameters('scaleMaxReplicas')]",
                            "minReplicas": "[parameters('scaleMinReplicas')]",
                            "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                          },
                          "serviceBinds": "[if(and(parameters('includeAddOns'), not(empty(parameters('serviceBinds')))), parameters('serviceBinds'), null())]",
                          "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                        },
                        "workloadProfileName": "[parameters('workloadProfileName')]"
                      }
                    },
                    "containerApp_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    },
                    "containerApp_roleAssignments": {
                      "copy": {
                        "name": "containerApp_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Container App."
                      },
                      "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                    },
                    "fqdn": {
                      "type": "string",
                      "metadata": {
                        "description": "The configuration of ingress fqdn."
                      },
                      "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Container App was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Container App."
                      },
                      "value": "[parameters('name')]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2024-03-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('containerApp', '2024-03-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', 'backend-fetch-image')]",
                "[resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-job', variables('backendContainerName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containers": {
                    "value": [
                      {
                        "name": "[format('{0}-job', variables('backendContainerName'))]",
                        "image": "[if(parameters('frontendExists'), reference(resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image'), '2022-09-01').outputs.containers.value[0].image, 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                        "command": [
                          "/bin/bash"
                        ],
                        "args": [
                          "-c",
                          "python /app/src/pipeline/policyIndexer/indexerSetup.py --target '/app'"
                        ],
                        "env": [
                          {
                            "name": "AZURE_CLIENT_ID",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.clientId.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_API_VERSION",
                            "value": "[parameters('openAiApiVersion')]"
                          },
                          {
                            "name": "AZURE_OPENAI_EMBEDDING_DEPLOYMENT",
                            "value": "[parameters('embeddingModel').name]"
                          },
                          {
                            "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_ID",
                            "value": "[parameters('chatCompletionModels')[0].name]"
                          },
                          {
                            "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_01",
                            "value": "[parameters('chatCompletionModels')[0].name]"
                          },
                          {
                            "name": "AZURE_OPENAI_EMBEDDING_DIMENSIONS",
                            "value": "[parameters('embeddingModelDimension')]"
                          },
                          {
                            "name": "AZURE_SEARCH_SERVICE_NAME",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
                          },
                          {
                            "name": "AZURE_SEARCH_INDEX_NAME",
                            "value": "ai-policies-index"
                          },
                          {
                            "name": "AZURE_AI_SEARCH_SERVICE_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceEndpoint.value]"
                          },
                          {
                            "name": "AZURE_BLOB_CONTAINER_NAME",
                            "value": "[parameters('storageBlobContainerName')]"
                          },
                          {
                            "name": "AZURE_STORAGE_ACCOUNT_NAME",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                          },
                          {
                            "name": "AZURE_COSMOS_DB_DATABASE_NAME",
                            "value": "[parameters('cosmosDbDatabaseName')]"
                          },
                          {
                            "name": "AZURE_COSMOS_DB_COLLECTION_NAME",
                            "value": "[parameters('cosmosDbCollectionName')]"
                          },
                          {
                            "name": "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
                          },
                          {
                            "name": "AZURE_OPENAI_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                          },
                          {
                            "name": "AZURE_AI_SEARCH_ADMIN_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServicePrimaryKey.value]"
                          },
                          {
                            "name": "AZURE_STORAGE_CONNECTION_STRING",
                            "value": "[format('ResourceId={0}', reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountId.value)]"
                          },
                          {
                            "name": "AZURE_AI_SERVICES_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesPrimaryKey.value]"
                          },
                          {
                            "name": "AZURE_COSMOS_CONNECTION_STRING",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.mongoConnectionString.value]"
                          },
                          {
                            "name": "AZURE_DOCUMENT_INTELLIGENCE_KEY",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                          },
                          {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
                          }
                        ]
                      }
                    ]
                  },
                  "environmentResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "name": {
                    "value": "[format('{0}-job', variables('backendContainerName'))]"
                  },
                  "triggerType": {
                    "value": "Manual"
                  },
                  "registries": {
                    "value": [
                      {
                        "identity": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]",
                        "server": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.loginServer.value]"
                      }
                    ]
                  },
                  "manualTriggerConfig": {
                    "value": {
                      "parallelism": 1,
                      "replicaCompletionCount": 1
                    }
                  },
                  "replicaTimeout": {
                    "value": 1000
                  },
                  "replicaRetryLimit": {
                    "value": 3
                  },
                  "managedIdentities": {
                    "value": {
                      "userAssignedResourceIds": [
                        "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
                      ]
                    }
                  },
                  "roleAssignments": {
                    "value": [
                      {
                        "name": "[guid(format('{0}-job', variables('backendContainerName')), 'Container App Jobs Operator')]",
                        "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionIdOrName": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9a307c4-5aa3-4b52-ba60-2b17c136cd7b')]"
                      }
                    ]
                  },
                  "location": {
                    "value": "[variables('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "18327789516167716303"
                    },
                    "name": "Container App Jobs",
                    "description": "This module deploys a Container App Job.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      }
                    },
                    "registryType": {
                      "type": "object",
                      "properties": {
                        "server": {
                          "type": "string",
                          "metadata": {
                            "example": "myregistry.azurecr.io",
                            "description": "Required. The FQDN name of the container registry."
                          }
                        },
                        "identity": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "example": "    user-assigned identity: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity\n    system-assigned identity: system\n    ",
                            "description": "Optional. The resource ID of the (user) managed identity, which is used to access the Azure Container Registry."
                          }
                        },
                        "username": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The username for the container registry."
                          }
                        },
                        "passwordSecretRef": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The name of the secret contains the login password. Required if `username` is not null."
                          }
                        }
                      }
                    },
                    "secretType": {
                      "type": "object",
                      "properties": {
                        "identity": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity."
                          }
                        },
                        "keyVaultUrl": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "example": "https://myvault${environment().suffixes.keyvaultDns}/secrets/mysecret",
                            "description": "Conditional. Azure Key Vault URL pointing to the secret referenced by the Container App Job. Required if `value` is null."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the secret."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The secret value, if not fetched from Key Vault. Required if `keyVaultUrl` is not null."
                          }
                        }
                      }
                    },
                    "volumeType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the volume."
                          }
                        },
                        "mountOptions": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. Mount options used while mounting the Azure file share or NFS Azure file share. Must be a comma-separated string. Required if `storageType` is not `EmptyDir`."
                          }
                        },
                        "secrets": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef."
                                }
                              },
                              "secretRef": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of the Container App secret from which to pull the secret value."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume."
                          }
                        },
                        "storageName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The storage account name. Not needed for EmptyDir and Secret. Required if `storageType` is `AzureFile` or `NfsAzureFile`."
                          }
                        },
                        "storageType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureFile",
                            "EmptyDir",
                            "NfsAzureFile",
                            "Secret"
                          ],
                          "metadata": {
                            "description": "Required. The container name."
                          }
                        }
                      }
                    },
                    "containerEnvironmentVariablesType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The environment variable name."
                          }
                        },
                        "secretRef": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The name of the Container App secret from which to pull the envrionment variable value. Required if `value` is null."
                          }
                        },
                        "value": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The environment variable value. Required if `secretRef` is null."
                          }
                        }
                      }
                    },
                    "containerProbeType": {
                      "type": "object",
                      "properties": {
                        "failureThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                          }
                        },
                        "httpGet": {
                          "type": "object",
                          "properties": {
                            "host": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Host name to connect to, defaults to the pod IP."
                              }
                            },
                            "httpHeaders": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The header field name."
                                    }
                                  },
                                  "value": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The header field value."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom headers to set in the request."
                              }
                            },
                            "path": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Path to access on the HTTP server."
                              }
                            },
                            "port": {
                              "type": "int",
                              "minValue": 1,
                              "maxValue": 65535,
                              "metadata": {
                                "description": "Required. Name of the port to access on the container. If not specified, the containerPort is used."
                              }
                            },
                            "scheme": {
                              "type": "string",
                              "allowedValues": [
                                "HTTP",
                                "HTTPS"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTPGet specifies the http request to perform."
                          }
                        },
                        "initialDelaySeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 60,
                          "metadata": {
                            "description": "Optional. Number of seconds after the container has started before liveness probes are initiated. Defaults to 0 seconds."
                          }
                        },
                        "periodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 60,
                          "metadata": {
                            "description": "Optional. How often (in seconds) to perform the probe. Defaults to 10 seconds."
                          }
                        },
                        "successThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1."
                          }
                        },
                        "tcpSocket": {
                          "type": "object",
                          "properties": {
                            "host": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Host name to connect to, defaults to the pod IP."
                              }
                            },
                            "port": {
                              "type": "int",
                              "minValue": 1,
                              "maxValue": 65535,
                              "metadata": {
                                "description": "Required. Name of the port to access on the container. If not specified, the containerPort is used."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. TCPSocket specifies an action involving a TCP port."
                          }
                        },
                        "terminationGracePeriodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 0,
                          "maxValue": 3600,
                          "metadata": {
                            "description": "Optional. Duration in seconds the pod needs to terminate gracefully upon probe failure. This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate."
                          }
                        },
                        "timeoutSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "Liveness",
                            "Readiness",
                            "Startup"
                          ],
                          "metadata": {
                            "description": "Required. The type of probe."
                          }
                        }
                      }
                    },
                    "containerResourceType": {
                      "type": "object",
                      "properties": {
                        "cpu": {
                          "type": "string",
                          "metadata": {
                            "example": "    '0.25'\n    '1'\n    ",
                            "description": "Required. The CPU limit of the container in cores."
                          }
                        },
                        "memory": {
                          "type": "string",
                          "metadata": {
                            "example": "    '250Mb'\n    '1.5Gi'\n    '1500Mi'\n    ",
                            "description": "Required. The required memory."
                          }
                        }
                      }
                    },
                    "containerVolumeMountType": {
                      "type": "object",
                      "properties": {
                        "mountPath": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The path within the container at which the volume should be mounted. Must not contain ':'."
                          }
                        },
                        "subPath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Path within the volume from which the container's volume should be mounted."
                          }
                        },
                        "volumeName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. This must match the Name of a Volume."
                          }
                        }
                      }
                    },
                    "manualTriggerConfigType": {
                      "type": "object",
                      "properties": {
                        "parallelism": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Number of parallel replicas of a job that can run at a given time. Defaults to 1."
                          }
                        },
                        "replicaCompletionCount": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Minimum number of successful replica completions before overall job completion. Must be equal or or less than the parallelism. Defaults to 1."
                          }
                        }
                      }
                    },
                    "scheduleTriggerconfigType": {
                      "type": "object",
                      "properties": {
                        "cronExpression": {
                          "type": "string",
                          "metadata": {
                            "example": "    '* * * * *' // Every minute, every hour, every day\n    '0 0 * * *' // at 00:00 UTC every day\n    ",
                            "description": "Required. Cron formatted repeating schedule (\"* * * * *\") of a Cron Job. It supports the standard [cron](https://en.wikipedia.org/wiki/Cron) expression syntax."
                          }
                        },
                        "parallelism": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Number of parallel replicas of a job that can run at a given time. Defaults to 1."
                          }
                        },
                        "replicaCompletionCount": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Number of successful completions of a job that are necessary to consider the job complete. Must be equal or or less than the parallelism. Defaults to 1."
                          }
                        }
                      }
                    },
                    "eventTriggerConfigType": {
                      "type": "object",
                      "properties": {
                        "parallelism": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Number of parallel replicas of a job that can run at a given time. Defaults to 1."
                          }
                        },
                        "replicaCompletionCount": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Minimum number of successful replica completions before overall job completion. Must be equal or or less than the parallelism. Defaults to 1."
                          }
                        },
                        "scale": {
                          "$ref": "#/definitions/jobScaleType",
                          "metadata": {
                            "description": "Required. Scaling configurations for event driven jobs."
                          }
                        }
                      }
                    },
                    "jobScaleType": {
                      "type": "object",
                      "properties": {
                        "maxExecutions": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum number of job executions that are created for a trigger, default 100."
                          }
                        },
                        "minExecutions": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Minimum number of job executions that are created for a trigger, default 0."
                          }
                        },
                        "pollingInterval": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Interval to check each event source in seconds. Defaults to 30s."
                          }
                        },
                        "rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "auth": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "secretRef": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the secret from which to pull the auth params."
                                      }
                                    },
                                    "triggerParameter": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Trigger Parameter that uses the secret."
                                      }
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Authentication secrets for the scale rule."
                                }
                              },
                              "metadata": {
                                "type": "object",
                                "metadata": {
                                  "example": "    {\n      \"// for type azure-queue\n      {\n        queueName: 'default'\n        storageAccountResourceId: '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount'\n      }\"\n    }\n    ",
                                  "description": "Required. Metadata properties to describe the scale rule."
                                }
                              },
                              "name": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The name of the scale rule."
                                }
                              },
                              "type": {
                                "type": "string",
                                "metadata": {
                                  "example": "      \"azure-servicebus\"\n      \"azure-queue\"\n      \"redis\"\n    ",
                                  "description": "Required. The type of the rule."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "example": "    [\n      // for type azure-queue\n      {\n        name: 'myrule'\n        type: 'azure-queue'\n        metadata: {\n          queueName: 'default'\n          storageAccountResourceId: '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount'\n        }\n        auth: {\n          secretRef: 'mysecret'\n          triggerParameter: 'queueName'\n        }\n      }\n    ]\n    ",
                            "description": "Required. Scaling rules for the job."
                          }
                        }
                      }
                    },
                    "initContainerType": {
                      "type": "object",
                      "properties": {
                        "args": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. Container start command arguments."
                          }
                        },
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. Container start command."
                          }
                        },
                        "env": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerEnvironmentVariablesType"
                          },
                          "nullable": true,
                          "metadata": {
                            "example": "    [\n      {\n        name: 'AZURE_STORAGE_QUEUE_NAME'\n        value: '<storage-queue-name>'\n      }\n      {\n        name: 'AZURE_STORAGE_CONNECTION_STRING'\n        secretRef: 'connection-string'\n      }\n    ]\n    ",
                            "description": "Optional. The environment variables to set in the container."
                          }
                        },
                        "image": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The image of the container."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the container."
                          }
                        },
                        "resources": {
                          "$ref": "#/definitions/containerResourceType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container resource requirements."
                          }
                        },
                        "volumeMounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerVolumeMountType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The volume mounts to attach to the container."
                          }
                        }
                      }
                    },
                    "containerType": {
                      "type": "object",
                      "properties": {
                        "args": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command arguments."
                          }
                        },
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The command to run in the container."
                          }
                        },
                        "env": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerEnvironmentVariablesType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The environment variables to set in the container."
                          }
                        },
                        "image": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The image of the container."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the container."
                          }
                        },
                        "probes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerProbeType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The probes of the container."
                          }
                        },
                        "resources": {
                          "$ref": "#/definitions/containerResourceType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resources to allocate to the container."
                          }
                        },
                        "volumeMounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerVolumeMountType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The volume mounts to attach to the container."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container App."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources. Defaults to the location of the Resource Group."
                      }
                    },
                    "environmentResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of Container Apps Environment."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "example": "  {\n      key1: 'value1'\n      key2: 'value2'\n  }\n  ",
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/registryType"
                      },
                      "nullable": true,
                      "metadata": {
                        "example": "  [\n    {\n      server: 'myregistry.azurecr.io'\n      identity: '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity'\n    }\n    {\n      server: 'myregistry2.azurecr.io'\n      identity: 'system'\n    }\n    {\n      server: 'myregistry3.azurecr.io'\n      username: 'myusername'\n      passwordSecretRef: 'secret-name'\n    }\n  ]",
                        "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "nullable": true,
                      "metadata": {
                        "example": "  {\n    systemAssigned: true,\n    userAssignedResourceIds: [\n      '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity'\n    ]\n  }\n  {\n    systemAssigned: true\n  }\n  ",
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/containerType"
                      },
                      "metadata": {
                        "description": "Required. List of container definitions for the Container App."
                      }
                    },
                    "initContainers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/initContainerType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of specialized containers that run before app containers."
                      }
                    },
                    "eventTriggerConfig": {
                      "$ref": "#/definitions/eventTriggerConfigType",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. Configuration of an event driven job. Required if `TriggerType` is `Event`."
                      }
                    },
                    "scheduleTriggerConfig": {
                      "$ref": "#/definitions/scheduleTriggerconfigType",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. Configuration of a schedule based job. Required if `TriggerType` is `Schedule`."
                      }
                    },
                    "manualTriggerConfig": {
                      "$ref": "#/definitions/manualTriggerConfigType",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. Configuration of a manually triggered job. Required if `TriggerType` is `Manual`."
                      }
                    },
                    "replicaRetryLimit": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. The maximum number of times a replica can be retried."
                      }
                    },
                    "workloadProfileName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the workload profile to use. Leave empty to use a consumption based profile."
                      }
                    },
                    "secrets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretType"
                      },
                      "nullable": true,
                      "metadata": {
                        "example": "  [\n    {\n      name: 'mysecret'\n      identity: '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity'\n      keyVaultUrl: 'https://myvault${environment().suffixes.keyvaultDns}/secrets/mysecret'\n    }\n    {\n      name: 'mysecret'\n      identity: 'system'\n      keyVaultUrl: 'https://myvault${environment().suffixes.keyvaultDns}/secrets/mysecret'\n    }\n    {\n      // You can do this, but you shouldn't. Use a secret reference instead.\n      name: 'mysecret'\n      value: 'mysecretvalue'\n    }\n    {\n      name: 'connection-string'\n      value: listKeys('/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount', '2023-04-01').keys[0].value\n    }\n  ]\n  ",
                        "description": "Optional. The secrets of the Container App."
                      }
                    },
                    "volumes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/volumeType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of volume definitions for the Container App."
                      }
                    },
                    "replicaTimeout": {
                      "type": "int",
                      "defaultValue": 1800,
                      "metadata": {
                        "description": "Optional. Maximum number of seconds a replica is allowed to run."
                      }
                    },
                    "triggerType": {
                      "type": "string",
                      "allowedValues": [
                        "Event",
                        "Manual",
                        "Schedule"
                      ],
                      "metadata": {
                        "description": "Required. Trigger type of the job."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.app-job.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "job": {
                      "type": "Microsoft.App/jobs",
                      "apiVersion": "2024-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "environmentId": "[parameters('environmentResourceId')]",
                        "configuration": {
                          "triggerType": "[parameters('triggerType')]",
                          "eventTriggerConfig": "[if(equals(parameters('triggerType'), 'Event'), parameters('eventTriggerConfig'), null())]",
                          "manualTriggerConfig": "[if(equals(parameters('triggerType'), 'Manual'), parameters('manualTriggerConfig'), null())]",
                          "scheduleTriggerConfig": "[if(equals(parameters('triggerType'), 'Schedule'), parameters('scheduleTriggerConfig'), null())]",
                          "replicaRetryLimit": "[parameters('replicaRetryLimit')]",
                          "replicaTimeout": "[parameters('replicaTimeout')]",
                          "registries": "[parameters('registries')]",
                          "secrets": "[parameters('secrets')]"
                        },
                        "template": {
                          "containers": "[parameters('containers')]",
                          "initContainers": "[parameters('initContainers')]",
                          "volumes": "[parameters('volumes')]"
                        },
                        "workloadProfileName": "[parameters('workloadProfileName')]"
                      }
                    },
                    "job_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.App/jobs/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "job"
                      ]
                    },
                    "job_roleAssignments": {
                      "copy": {
                        "name": "job_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.App/jobs/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/jobs', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "job"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "example": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.App/jobs/myJob",
                        "description": "The resource ID of the Container App Job."
                      },
                      "value": "[resourceId('Microsoft.App/jobs', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "example": "myResourceGroup",
                        "description": "The name of the resource group the Container App Job was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "example": "myJob",
                        "description": "The name of the Container App Job."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "example": "Germany West Central",
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('job', '2024-03-01', 'full').location]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "example": "00000000-0000-0000-0000-000000000000",
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('job', '2024-03-01', 'full'), 'identity'), 'principalId'), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image')]",
                "[resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "AZURE_OPENAI_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
            },
            "AZURE_OPENAI_API_VERSION": {
              "type": "string",
              "value": "[parameters('openAiApiVersion')]"
            },
            "AZURE_OPENAI_EMBEDDING_DEPLOYMENT": {
              "type": "string",
              "value": "[parameters('embeddingModel').name]"
            },
            "AZURE_OPENAI_CHAT_DEPLOYMENT_ID": {
              "type": "string",
              "value": "[parameters('chatCompletionModels')[0].name]"
            },
            "AZURE_OPENAI_CHAT_DEPLOYMENT_01": {
              "type": "string",
              "value": "[parameters('chatCompletionModels')[0].name]"
            },
            "AZURE_OPENAI_EMBEDDING_DIMENSIONS": {
              "type": "string",
              "value": "[parameters('embeddingModelDimension')]"
            },
            "AZURE_SEARCH_SERVICE_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
            },
            "AZURE_SEARCH_INDEX_NAME": {
              "type": "string",
              "value": "ai-policies-index"
            },
            "AZURE_AI_SEARCH_ADMIN_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServicePrimaryKey.value]"
            },
            "AZURE_AI_SEARCH_SERVICE_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceEndpoint.value]"
            },
            "AZURE_STORAGE_ACCOUNT_KEY": {
              "type": "string",
              "value": ""
            },
            "AZURE_BLOB_CONTAINER_NAME": {
              "type": "string",
              "value": "[parameters('storageBlobContainerName')]"
            },
            "AZURE_STORAGE_ACCOUNT_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
            },
            "AZURE_STORAGE_CONNECTION_STRING": {
              "type": "string",
              "value": "[format('ResourceId={0}', reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountId.value)]"
            },
            "AZURE_AI_SERVICES_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesPrimaryKey.value]"
            },
            "AZURE_COSMOS_DB_DATABASE_NAME": {
              "type": "string",
              "value": "priorauthsessions"
            },
            "AZURE_COSMOS_DB_COLLECTION_NAME": {
              "type": "string",
              "value": "temp"
            },
            "AZURE_COSMOS_CONNECTION_STRING": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.mongoConnectionString.value]"
            },
            "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
            },
            "AZURE_DOCUMENT_INTELLIGENCE_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
            },
            "APPLICATIONINSIGHTS_CONNECTION_STRING": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-monitoring-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
            },
            "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('avm-registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.loginServer.value]"
            },
            "AZURE_CONTAINER_ENVIRONMENT_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "AZURE_CONTAINER_ENVIRONMENT_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('managedenv-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.name.value]"
            },
            "AZURE_OPENAI_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
            },
            "CONTAINER_JOB_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-job', variables('backendContainerName'))), '2022-09-01').outputs.name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName')))]"
      ]
    }
  ],
  "outputs": {
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group"
      },
      "value": "[format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))]"
    },
    "CONTAINER_JOB_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the container job"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.CONTAINER_JOB_NAME.value]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "Endpoint for Azure OpenAI"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_ENDPOINT.value]"
    },
    "AZURE_OPENAI_API_VERSION": {
      "type": "string",
      "metadata": {
        "description": "API version for Azure OpenAI"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_API_VERSION.value]"
    },
    "AZURE_OPENAI_EMBEDDING_DEPLOYMENT": {
      "type": "string",
      "metadata": {
        "description": "Deployment name for Azure OpenAI embedding"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT.value]"
    },
    "AZURE_OPENAI_CHAT_DEPLOYMENT_ID": {
      "type": "string",
      "metadata": {
        "description": "Deployment ID for Azure OpenAI chat"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_CHAT_DEPLOYMENT_ID.value]"
    },
    "AZURE_OPENAI_CHAT_DEPLOYMENT_01": {
      "type": "string",
      "metadata": {
        "description": "Deployment name for Azure OpenAI chat model 01"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_CHAT_DEPLOYMENT_01.value]"
    },
    "AZURE_OPENAI_EMBEDDING_DIMENSIONS": {
      "type": "string",
      "metadata": {
        "description": "Embedding dimensions for Azure OpenAI"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_EMBEDDING_DIMENSIONS.value]"
    },
    "AZURE_SEARCH_SERVICE_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Search service"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_SEARCH_SERVICE_NAME.value]"
    },
    "AZURE_SEARCH_INDEX_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Search index"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_SEARCH_INDEX_NAME.value]"
    },
    "AZURE_AI_SEARCH_ADMIN_KEY": {
      "type": "string",
      "metadata": {
        "description": "Admin key for Azure AI Search"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_AI_SEARCH_ADMIN_KEY.value]"
    },
    "AZURE_BLOB_CONTAINER_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Blob container"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_BLOB_CONTAINER_NAME.value]"
    },
    "AZURE_STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Storage account"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_STORAGE_ACCOUNT_NAME.value]"
    },
    "AZURE_STORAGE_ACCOUNT_KEY": {
      "type": "string",
      "metadata": {
        "description": "Key for the Azure Storage account"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_STORAGE_ACCOUNT_KEY.value]"
    },
    "AZURE_STORAGE_CONNECTION_STRING": {
      "type": "string",
      "metadata": {
        "description": "Connection string for the Azure Storage account"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_STORAGE_CONNECTION_STRING.value]"
    },
    "AZURE_AI_SERVICES_KEY": {
      "type": "string",
      "metadata": {
        "description": "Key for Azure AI services"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_AI_SERVICES_KEY.value]"
    },
    "AZURE_COSMOS_DB_DATABASE_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Cosmos DB database"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_COSMOS_DB_DATABASE_NAME.value]"
    },
    "AZURE_COSMOS_DB_COLLECTION_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Cosmos DB collection"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_COSMOS_DB_COLLECTION_NAME.value]"
    },
    "AZURE_COSMOS_CONNECTION_STRING": {
      "type": "string",
      "metadata": {
        "description": "Connection string for Azure Cosmos DB"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_COSMOS_CONNECTION_STRING.value]"
    },
    "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "Endpoint for Azure Document Intelligence"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT.value]"
    },
    "AZURE_DOCUMENT_INTELLIGENCE_KEY": {
      "type": "string",
      "metadata": {
        "description": "Key for Azure Document Intelligence"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_DOCUMENT_INTELLIGENCE_KEY.value]"
    },
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "metadata": {
        "description": "Connection string for Application Insights"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.APPLICATIONINSIGHTS_CONNECTION_STRING.value]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "Endpoint for Azure Container Registry"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_CONTAINER_REGISTRY_ENDPOINT.value]"
    },
    "AZURE_CONTAINER_ENVIRONMENT_ID": {
      "type": "string",
      "metadata": {
        "description": "ID for Azure Container Environment"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_CONTAINER_ENVIRONMENT_ID.value]"
    },
    "AZURE_OPENAI_KEY": {
      "type": "string",
      "metadata": {
        "description": "Key for Azure OpenAI"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_KEY.value]"
    },
    "AZURE_AI_SEARCH_SERVICE_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "Service endpoint for Azure AI Search"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_AI_SEARCH_SERVICE_ENDPOINT.value]"
    }
  }
}
